{
  "address": "0xAB45F8FB2ea54524250e6523856bbd94BF01b014",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mainHook",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidTick",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "CrossedGo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "FoundAsSybil",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ender",
          "type": "address"
        }
      ],
      "name": "GameEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "GamePlayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "starter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameStarted",
          "type": "uint256"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PlayerWon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivingAirdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RentPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dice1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dice2",
          "type": "uint256"
        }
      ],
      "name": "RolledDice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "SentToJail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "UserLose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "VisitJail",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "_removePlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "_rollDice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "snake",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "list",
          "type": "string[]"
        }
      ],
      "name": "addNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beginMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "daysInJail",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveGameID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActivePlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveProperties",
      "outputs": [
        {
          "internalType": "contract Property[]",
          "name": "list",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProperties",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "list",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Property",
          "name": "prop",
          "type": "address"
        }
      ],
      "name": "getBalanceOfProperty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBankBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBuyIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentChosenCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyProperties",
      "outputs": [
        {
          "internalType": "contract Property[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPlayerPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "getProperty",
      "outputs": [
        {
          "internalType": "contract Property",
          "name": "prop",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToGameState",
      "outputs": [
        {
          "internalType": "address",
          "name": "currentPlayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "numberOfPlayers",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "chosenCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buyIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainHook",
      "outputs": [
        {
          "internalType": "contract MyHook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerToGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToSpend",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "property",
          "type": "address"
        }
      ],
      "name": "purchaseProperty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "reclaimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "returnPropertyUnderPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToSell",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "property",
          "type": "address"
        }
      ],
      "name": "sellProperty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "sendUserToJail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "selectedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bankStart",
          "type": "uint256"
        }
      ],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stepsFoward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "rollAgain",
          "type": "bool"
        }
      ],
      "name": "testMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInJail",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRoll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRollsRow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbae9608c27180d4dd6e684a2a76ac3085cfd6bb57d3b3137a4fe317efd833385",
  "receipt": {
    "to": null,
    "from": "0xa91100312fFc485f3deAaeC457Fd930bCDe6a6e4",
    "contractAddress": "0xAB45F8FB2ea54524250e6523856bbd94BF01b014",
    "transactionIndex": 4,
    "gasUsed": "4962410",
    "logsBloom": "0x
    "blockHash": "0x9b1128c33db8f72f8651857571f370bc56f53f82c4d236c0c6f1529979a74a92",
    "transactionHash": "0xbae9608c27180d4dd6e684a2a76ac3085cfd6bb57d3b3137a4fe317efd833385",
    "logs": [],
    "blockNumber": 7435656,
    "cumulativeGasUsed": "5069285",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf8dAc2c5E2adC5EB0b4e617A0081b743c74840db",
    "0x0220a353bC788Bc84B4dD6F956eAE3Ae4b189703"
  ],
  "numDeployments": 1,
  "solcInputHash": "7a0c43d181ff6dfc96b9087e32fe29a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainHook\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidTick\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"CrossedGo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"FoundAsSybil\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ender\",\"type\":\"address\"}],\"name\":\"GameEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"GamePlayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"starter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameStarted\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlayerWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivingAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RentPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dice1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dice2\",\"type\":\"uint256\"}],\"name\":\"RolledDice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"SentToJail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"UserLose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"VisitJail\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"_removePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"_rollDice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"snake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"list\",\"type\":\"string[]\"}],\"name\":\"addNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daysInJail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveGameID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivePlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveProperties\",\"outputs\":[{\"internalType\":\"contract Property[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProperties\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"list\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Property\",\"name\":\"prop\",\"type\":\"address\"}],\"name\":\"getBalanceOfProperty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBankBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentChosenCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyProperties\",\"outputs\":[{\"internalType\":\"contract Property[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPlayerPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getProperty\",\"outputs\":[{\"internalType\":\"contract Property\",\"name\":\"prop\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToGameState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfPlayers\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chosenCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainHook\",\"outputs\":[{\"internalType\":\"contract MyHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerToGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToSpend\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"}],\"name\":\"purchaseProperty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"returnPropertyUnderPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"}],\"name\":\"sellProperty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"sendUserToJail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"selectedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bankStart\",\"type\":\"uint256\"}],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stepsFoward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rollAgain\",\"type\":\"bool\"}],\"name\":\"testMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInJail\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRoll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRollsRow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidTick()\":[{\"notice\":\"Thrown when the tick passed to #getSqrtRatioAtTick is not between MIN_TICK and MAX_TICK\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenTown/Game.sol\":\"Game\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/Hooks/BaseHook.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\nimport {Hooks} from \\\"../Uniswap/V4-Core/libraries/Hooks.sol\\\";\\nimport {IPoolManager} from \\\"../Uniswap/V4-Core/interfaces/IPoolManager.sol\\\";\\nimport {IHooks} from \\\"../Uniswap/V4-Core/interfaces/IHooks.sol\\\";\\nimport {BalanceDelta} from \\\"../Uniswap/V4-Core/types/BalanceDelta.sol\\\";\\nimport {PoolKey} from \\\"../Uniswap/V4-Core/types/PoolKey.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract BaseHook is IHooks {\\n    error NotPoolManager();\\n    error NotSelf();\\n    error InvalidPool();\\n    error LockFailure();\\n    error HookNotImplemented();\\n\\n    /// @notice The address of the pool manager\\n    IPoolManager public immutable poolManager;\\n\\n    constructor(IPoolManager _poolManager) {\\n        poolManager = _poolManager;\\n        validateHookAddress(this);\\n    }\\n\\n    /// @dev Only the pool manager may call this function\\n    modifier poolManagerOnly() {\\n        if (msg.sender != address(poolManager)) revert NotPoolManager();\\n        _;\\n    }\\n\\n    /// @dev Only this address may call this function\\n    modifier selfOnly() {\\n        if (msg.sender != address(this)) revert NotSelf();\\n        _;\\n    }\\n\\n    /// @dev Only pools with hooks set to this contract may call this function\\n    modifier onlyValidPools(IHooks hooks) {\\n        if (hooks != this) revert InvalidPool();\\n        _;\\n    }\\n\\n    function getHookPermissions()\\n        public\\n        pure\\n        virtual\\n        returns (Hooks.Permissions memory);\\n\\n    // this function is virtual so that we can override it during testing,\\n    // which allows us to deploy an implementation to any address\\n    // and then etch the bytecode into the correct address\\n    function validateHookAddress(BaseHook _this) internal pure virtual {\\n        // console.log(\\\"Current addy\\\", address(_this));\\n        Hooks.validateHookPermissions(_this, getHookPermissions());\\n    }\\n\\n    function lockAcquired(\\n        address,\\n        /*sender*/ bytes calldata data\\n    ) external virtual poolManagerOnly returns (bytes memory) {\\n        (bool success, bytes memory returnData) = address(this).call(data);\\n        if (success) return returnData;\\n        if (returnData.length == 0) revert LockFailure();\\n        // if the call failed, bubble up the reason\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            revert(add(returnData, 32), mload(returnData))\\n        }\\n    }\\n\\n    function beforeInitialize(\\n        address,\\n        PoolKey calldata,\\n        uint160,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    function afterInitialize(\\n        address,\\n        PoolKey calldata,\\n        uint160,\\n        int24,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    function beforeAddLiquidity(\\n        address,\\n        PoolKey calldata,\\n        IPoolManager.ModifyLiquidityParams calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    function beforeRemoveLiquidity(\\n        address,\\n        PoolKey calldata,\\n        IPoolManager.ModifyLiquidityParams calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    function afterAddLiquidity(\\n        address,\\n        PoolKey calldata,\\n        IPoolManager.ModifyLiquidityParams calldata,\\n        BalanceDelta,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    function afterRemoveLiquidity(\\n        address,\\n        PoolKey calldata,\\n        IPoolManager.ModifyLiquidityParams calldata,\\n        BalanceDelta,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    function beforeSwap(\\n        address,\\n        PoolKey calldata,\\n        IPoolManager.SwapParams calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    function afterSwap(\\n        address,\\n        PoolKey calldata,\\n        IPoolManager.SwapParams calldata,\\n        BalanceDelta,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    function beforeDonate(\\n        address,\\n        PoolKey calldata,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    function afterDonate(\\n        address,\\n        PoolKey calldata,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n}\\n\",\"keccak256\":\"0x1bb9164964b17eb66f4ede3b14148aa88f89fd00f5a8537c3dfb2b9f96bd8658\",\"license\":\"UNLICENSED\"},\"contracts/MyHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {BaseHook} from \\\"./Hooks/BaseHook.sol\\\";\\n\\nimport {Hooks} from \\\"./Uniswap/V4-Core/libraries/Hooks.sol\\\";\\n\\nimport {IPoolManager} from \\\"./Uniswap/V4-Core/interfaces/IPoolManager.sol\\\";\\nimport {Currency, CurrencyLibrary} from \\\"./Uniswap/V4-Core/types/Currency.sol\\\";\\n\\nimport {PoolKey} from \\\"./Uniswap/V4-Core/types/PoolKey.sol\\\";\\nimport {PoolId, PoolIdLibrary} from \\\"./Uniswap/V4-Core/types/PoolId.sol\\\";\\nimport {BalanceDelta} from \\\"./Uniswap/V4-Core/types/BalanceDelta.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// import {UniswapInteract} from \\\"./UniswapInteract.sol\\\";\\n//Uncomment below for console logs\\nimport \\\"hardhat/console.sol\\\";\\nerror SwapExpired();\\nerror OnlyPoolManager();\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Property} from \\\"./TokenTown/Property.sol\\\";\\nimport {Game} from \\\"./TokenTown/Game.sol\\\";\\n\\ncontract MyHook is BaseHook {\\n    using PoolIdLibrary for PoolKey;\\n    using CurrencyLibrary for Currency;\\n    // NOTE: ---------------------------------------------------------\\n    // state variables should typically be unique to a pool\\n    // a single hook contract should be able to service multiple pools\\n    // ---------------------------------------------------------------\\n\\n    mapping(PoolId => uint256 count) public beforeSwapCount;\\n    mapping(PoolId => uint256 count) public afterSwapCount;\\n\\n    mapping(PoolId => uint256 count) public beforeAddLiquidityCount;\\n    mapping(PoolId => uint256 count) public beforeRemoveLiquidityCount;\\n\\n    constructor(IPoolManager _poolManager) BaseHook(_poolManager) {}\\n\\n    //Below is for uniswap interact\\n    mapping(uint256 => InitParams) inits;\\n    uint256 initCount;\\n\\n    mapping(uint256 => IPoolManager.SwapParams) swaps;\\n    uint256 modSwap;\\n    address currentUser;\\n    Game public game;\\n    struct InitParams {\\n        PoolKey key;\\n        uint160 sqrtPrice;\\n        bytes hookData;\\n    }\\n\\n    function setGame(address _game) public {\\n        game = Game(_game);\\n    }\\n\\n    function startPool(\\n        PoolKey memory key,\\n        uint160 sqrtPrice,\\n        bytes calldata hookData,\\n        uint256 deadLine\\n    ) public payable returns (int24 tick) {\\n        inits[initCount] = InitParams(key, sqrtPrice, hookData);\\n\\n        bytes memory res = poolManager.lock(\\n            abi.encode(msg.sender, key, 99, initCount, deadLine)\\n        );\\n        return abi.decode(res, (int24));\\n    }\\n\\n    mapping(address => uint256) tokenPrice;\\n    mapping(address => uint256) tokenChange;\\n\\n    function swap(\\n        PoolKey calldata poolKey,\\n        IPoolManager.SwapParams calldata swapParams,\\n        uint256 deadline,\\n        address _user\\n    ) public payable returns (int256, int256) {\\n        swaps[modSwap] = swapParams;\\n        currentUser = _user;\\n        bytes memory res = poolManager.lock(\\n            abi.encode(msg.sender, poolKey, 1, modSwap, deadline)\\n        );\\n\\n        return abi.decode(res, (int256, int256));\\n    }\\n\\n    function lockAcquired(\\n        bytes calldata data\\n    ) external returns (bytes memory res) {\\n        if (msg.sender != address(poolManager)) {\\n            revert OnlyPoolManager();\\n        }\\n\\n        (\\n            address user,\\n            PoolKey memory poolKey,\\n            uint256 action,\\n            uint256 counter,\\n            uint256 deadline\\n        ) = abi.decode(data, (address, PoolKey, uint256, uint256, uint256));\\n\\n        if (block.timestamp > deadline) {\\n            revert();\\n        }\\n        BalanceDelta delta;\\n\\n        if (action == 1) {\\n            delta = poolManager.swap(poolKey, swaps[counter], \\\"0x\\\");\\n\\n            int256 amount0 = poolManager.currencyDelta(\\n                address(this),\\n                poolKey.currency0\\n            );\\n\\n            int256 amount1 = poolManager.currencyDelta(\\n                address(this),\\n                poolKey.currency1\\n            );\\n\\n            // console.log(\\\"-\\\", uint256(-1 * amount0), uint256(amount1));\\n            // console.log(user);\\n            if (amount0 > 0) {\\n                SafeERC20.safeTransferFrom(\\n                    IERC20(Currency.unwrap(poolKey.currency0)),\\n                    user,\\n                    address(this),\\n                    uint256(amount0)\\n                );\\n\\n                SafeERC20.safeTransfer(\\n                    IERC20(Currency.unwrap(poolKey.currency0)),\\n                    address(poolManager),\\n                    uint256(amount0)\\n                );\\n                poolManager.settle(poolKey.currency0);\\n            }\\n            if (amount1 > 0) {\\n                SafeERC20.safeTransferFrom(\\n                    IERC20(Currency.unwrap(poolKey.currency1)),\\n                    user,\\n                    address(this),\\n                    uint256(amount1)\\n                );\\n\\n                SafeERC20.safeTransfer(\\n                    IERC20(Currency.unwrap(poolKey.currency1)),\\n                    address(poolManager),\\n                    uint256(amount1)\\n                );\\n                poolManager.settle(poolKey.currency1);\\n            }\\n            // console.log(\\\"Here\\\");\\n\\n            if (amount0 < 0) {\\n                poolManager.take(\\n                    poolKey.currency0,\\n                    address(this),\\n                    uint256(-1 * amount0)\\n                );\\n                SafeERC20.safeTransfer(\\n                    IERC20(Currency.unwrap(poolKey.currency0)),\\n                    user,\\n                    uint256(-1 * amount0)\\n                );\\n            }\\n            if (amount1 < 0) {\\n                poolManager.take(\\n                    poolKey.currency1,\\n                    address(this),\\n                    uint256(-1 * amount1)\\n                );\\n                // console.log(\\n                //     IERC20(Currency.unwrap(poolKey.currency1)).balanceOf(\\n                //         address(this)\\n                //     )\\n                // );\\n                SafeERC20.safeTransfer(\\n                    IERC20(Currency.unwrap(poolKey.currency1)),\\n                    user,\\n                    uint256(-1 * amount1)\\n                );\\n            }\\n            modSwap++;\\n            int256 amount0After = poolManager.currencyDelta(\\n                address(this),\\n                poolKey.currency0\\n            );\\n\\n            int256 amount1After = poolManager.currencyDelta(\\n                address(this),\\n                poolKey.currency1\\n            );\\n            require(amount0After == 0, \\\"Amount0 not settled\\\");\\n            require(amount1After == 0, \\\"Amount1 not settled\\\");\\n\\n            return res = abi.encode(amount0, amount1);\\n        }\\n\\n        if (action == 99) {\\n            InitParams memory params;\\n            params = inits[counter];\\n            poolManager.initialize(\\n                params.key,\\n                params.sqrtPrice,\\n                params.hookData\\n            );\\n        }\\n\\n        res = abi.encode(delta.amount0(), delta.amount1());\\n        //return new bytes();\\n    }\\n\\n    function getHookPermissions()\\n        public\\n        pure\\n        override\\n        returns (Hooks.Permissions memory)\\n    {\\n        return\\n            Hooks.Permissions({\\n                beforeInitialize: false,\\n                afterInitialize: false,\\n                beforeAddLiquidity: false,\\n                afterAddLiquidity: false,\\n                beforeRemoveLiquidity: false,\\n                afterRemoveLiquidity: false,\\n                beforeSwap: true,\\n                afterSwap: false,\\n                beforeDonate: false,\\n                afterDonate: false,\\n                noOp: true\\n            });\\n    }\\n\\n    // -----------------------------------------------\\n    // NOTE: see IHooks.sol for function documentation\\n    // -----------------------------------------------\\n    mapping(uint256 => uint256) public tokensBoughtAtPositon;\\n\\n    function beforeSwap(\\n        address,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata params,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        //Rules for monopoly\\n        //At most 1 token can be bought at one position\\n        // tokensBoughtAtPositon[]\\n        //User must be within the position to length of a token\\n\\n        // console.log(\\\"Before a swap 11\\\");\\n        uint256 tokenAmount = params.amountSpecified < 0\\n            ? uint256(-params.amountSpecified)\\n            : uint256(params.amountSpecified);\\n        uint256 amountSpent = tokenAmount;\\n        // console.log(\\\"Here\\\");\\n        // determine inbound/outbound token based on 0->1 or 1->0 swap\\n        (Currency inbound, Currency outbound) = params.zeroForOne\\n            ? (key.currency0, key.currency1)\\n            : (key.currency1, key.currency0);\\n\\n        if (Currency.unwrap(outbound) != game.getCurrentChosenCurrency()) {\\n            //This means the user is buying property\\n            //Must check that they are on it and enforce pricing\\n            Property property = Property(Currency.unwrap(outbound));\\n            require(currentUser != address(0), \\\"Must have new user\\\");\\n            uint256 currentUserPosition = game.getPlayerPosition(currentUser);\\n            require(\\n                property.canUserPurchase(currentUserPosition),\\n                \\\"User not on square\\\"\\n            );\\n            uint256 price = property.getPrice(currentUserPosition);\\n            // console.log(\\\"Price\\\", price);\\n            if (price == 0) {\\n                revert(\\\"The price is returning as 0\\\");\\n            }\\n            tokenAmount = tokenAmount / price;\\n            if (tokensBoughtAtPositon[currentUserPosition] >= 10 ** 18) {\\n                revert(\\\"Can not buy anymore here\\\");\\n            }\\n\\n            if (\\n                tokenAmount >\\n                10 ** 18 - tokensBoughtAtPositon[currentUserPosition]\\n            ) {\\n                tokensBoughtAtPositon[currentUserPosition] = 10 ** 18;\\n                uint256 refund = tokenAmount -\\n                    tokensBoughtAtPositon[currentUserPosition];\\n                refund = refund * price;\\n                amountSpent -= refund;\\n                tokenAmount = 10 ** 18;\\n                // console.log(\\\"Refund issued of:\\\", refund, amountSpent);\\n            } else {\\n                tokensBoughtAtPositon[currentUserPosition] = tokenAmount;\\n            }\\n        } else {\\n            Property property = Property(Currency.unwrap(inbound));\\n            uint256 currentUserPosition = game.getPlayerPosition(currentUser);\\n\\n            //User is selling property\\n            uint256 price = property.getPrice(currentUserPosition);\\n\\n            tokenAmount = tokenAmount * price;\\n            // console.log(\\\"Balance\\\", outbound.balanceOfSelf());\\n            poolManager.burn(address(this), outbound.toId(), tokenAmount); //This creates credit\\n            poolManager.take(outbound, address(this), tokenAmount); //This settles the credit\\n            if (tokenAmount > 10 ** 18) {\\n                tokensBoughtAtPositon[currentUserPosition] = 0;\\n            } else {\\n                tokensBoughtAtPositon[currentUserPosition] -= tokenAmount;\\n            }\\n\\n            // console.log(outbound.balanceOfSelf());\\n        }\\n\\n        // take the inbound token from the PoolManager, debt is paid by the swapper via the swap router\\n        // (inbound token is added to hook's reserves)\\n        poolManager.mint(address(this), inbound.toId(), amountSpent);\\n        // console.log(\\\"Here\\\", amountSpent);\\n\\n        // provide outbound token to the PoolManager, credit is claimed by the swap router who forwards it to the swapper\\n        // (outbound token is removed from hook's reserves)\\n        // console.log(\\\"Here\\\");\\n        // console.log(inbound.balanceOfSelf(), amountSpent);\\n        // console.log(outbound.balanceOfSelf(), tokenAmount);\\n        outbound.transfer(address(poolManager), tokenAmount);\\n        poolManager.settle(outbound);\\n        // console.log(outbound.balanceOfSelf(), tokenAmount);\\n\\n        // console.log(\\\"Finished\\\");\\n        return Hooks.NO_OP_SELECTOR;\\n    }\\n\\n    function afterSwap(\\n        address,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata,\\n        BalanceDelta,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        return BaseHook.afterSwap.selector;\\n    }\\n\\n    function beforeAddLiquidity(\\n        address,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        return BaseHook.beforeAddLiquidity.selector;\\n    }\\n\\n    function beforeRemoveLiquidity(\\n        address,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        return BaseHook.beforeRemoveLiquidity.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x71e6cd8d67628eed2ff179d9896664ba2075c6d6ff084b60b6b8e513eeb19665\",\"license\":\"MIT\"},\"contracts/TokenTown/Game.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport {IGame} from \\\"./IGame.sol\\\";\\nimport {Property} from \\\"./Property.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IPoolManager} from \\\"../Uniswap/V4-Core/interfaces/IPoolManager.sol\\\";\\n\\nimport {Currency, CurrencyLibrary} from \\\"../Uniswap/V4-Core/types/Currency.sol\\\";\\nimport {PoolKey} from \\\"../Uniswap/V4-Core/types/PoolKey.sol\\\";\\nimport {MyHook} from \\\"../MyHook.sol\\\";\\nimport {IHooks} from \\\"../Uniswap/V4-Core/interfaces/IHooks.sol\\\";\\nimport {TickMath} from \\\"../Uniswap/V4-Core/libraries/TickMath.sol\\\";\\n\\ncontract Game is IGame /*, VRFConsumerBaseV2*/ {\\n    //Below is for chainlink\\n    bytes32 internal keyHash;\\n    uint256 internal fee;\\n    uint256 public randomResult;\\n\\n    address public immutable poolManager;\\n    MyHook public immutable mainHook;\\n\\n    //Below is for the game\\n    uint256 gameID;\\n    mapping(address => uint256) public playerToGame;\\n    mapping(uint256 => GameState) public idToGameState;\\n    mapping(address => bool) public userRoll; //User can roll\\n    mapping(address => uint256) public userRollsRow; //# of rolls in a row\\n\\n    mapping(uint256 => bool) rentExists;\\n    mapping(uint256 => address[]) usersThatOwn;\\n\\n    string[] usualNamesAndSymbols;\\n    uint256 constant MAX_STEPS = 20;\\n    mapping(address => uint256) addressToGame;\\n\\n    mapping(address => TokenInfo) getCurrencyInfo;\\n\\n    struct TokenInfo {\\n        uint8[4] priceStarts;\\n        uint8[4] priceChanges;\\n        uint256 userStart;\\n    }\\n    mapping(address => PoolKey) addressToKey;\\n\\n    constructor(\\n        address _poolManager,\\n        address _mainHook // address vrfCoordinator\\n    ) /*VRFConsumerBaseV2(vrfCoordinator)*/ {\\n        require(\\n            _poolManager != address(0),\\n            \\\"Pool manager address cannot be zero.\\\"\\n        );\\n        poolManager = _poolManager;\\n        mainHook = MyHook(_mainHook);\\n        // You can use console.log for debugging purposes\\n        // console.log(\\\"Game contract deployed by:\\\", msg.sender);\\n        // console.log(\\\"Pool Manager set to:\\\", poolManager);\\n    }\\n\\n    //Function for testing\\n    function reclaimTokens(address token) external {\\n        IERC20(token).transfer(\\n            msg.sender,\\n            IERC20(token).balanceOf(address(this))\\n        );\\n    }\\n\\n    // Implementing the start function from IGame\\n    function setUp(address selectedToken, uint256 bankStart) external {\\n        SafeERC20.safeTransferFrom(\\n            IERC20(selectedToken),\\n            msg.sender,\\n            address(this),\\n            bankStart\\n        );\\n        idToGameState[gameID].players.push(msg.sender);\\n        addressToGame[msg.sender] = gameID;\\n        idToGameState[gameID].numberOfPlayers++;\\n        // console.log(\\\"GS\\\", idToGameState[gameID].numberOfPlayers);\\n        idToGameState[gameID].chosenCurrency = selectedToken;\\n\\n        //Mint 8 ERC20s with a balance of 4 for each\\n        _createAndAssignProperties(gameID);\\n        _prepareProperties(idToGameState[gameID].propertyList, selectedToken);\\n\\n        //Open up a game for other users to join\\n        //Add liquidity with the pools\\n\\n        gameID++;\\n    }\\n\\n    function _prepareProperties(\\n        Property[] memory propertyList,\\n        address selectedToken\\n    ) internal {\\n        for (uint256 i = 0; i < propertyList.length; i++) {\\n            Property property = propertyList[i];\\n            _preparePoolProperty(property, selectedToken);\\n        }\\n    }\\n\\n    function _preparePoolProperty(Property property, address token) internal {\\n        //First we need to initalize the pool\\n        address token0 = address(property);\\n        address token1 = token;\\n        if (token1 < token0) {\\n            address temp = token0;\\n            token0 = token1;\\n            token1 = temp;\\n        }\\n        Currency currency_property = Currency.wrap(token0);\\n        Currency currency_token = Currency.wrap(token1);\\n\\n        uint24 _fee = 0;\\n        int24 tickSpacing = 60;\\n        address hookAddy = address(mainHook);\\n        IHooks hooks = IHooks(hookAddy);\\n\\n        PoolKey memory key = PoolKey(\\n            currency_property,\\n            currency_token,\\n            _fee,\\n            tickSpacing,\\n            hooks\\n        );\\n        addressToKey[address(property)] = key;\\n        uint160 sqrtPrice = TickMath.getSqrtRatioAtTick(0);\\n\\n        mainHook.startPool(key, sqrtPrice, \\\"0x\\\", block.timestamp + 10);\\n        // console.log(\\\"Pool started\\\");\\n        // uint256 totalTokenNumber = 4 *\\n        property.getPriceStart() + 6 * property.getPriceIncrease();\\n        //Then we need to add liquidity\\n        // SafeERC20.safeTransferFrom(\\n        //     IERC20(token),\\n        //     msg.sender,\\n        //     address(this),\\n        //     totalTokenNumber\\n        // );\\n\\n        SafeERC20.safeTransfer(\\n            IERC20(address(property)),\\n            address(mainHook),\\n            IERC20(address(property)).balanceOf(address(this))\\n        );\\n        // mainHook.addProperty(property);\\n    }\\n\\n    function _createAndAssignProperties(uint256 _gameID) internal {\\n        uint8[4] memory usualList = [1, 6, 11, 16]; // These are the positions that all of the properties start on\\n        uint8[4] memory priceStarts;\\n        uint8[4] memory priceChanges;\\n        uint8[4] memory rentStarts;\\n\\n        TokenInfo memory tInfo = getCurrencyInfo[\\n            idToGameState[gameID].chosenCurrency\\n        ];\\n\\n        if (tInfo.userStart > 0) {\\n            priceStarts = tInfo.priceStarts;\\n            priceChanges = tInfo.priceChanges;\\n        } else {\\n            priceStarts = [60, 120, 160, 250];\\n            rentStarts = [10, 30, 50, 70];\\n            priceChanges = [5, 10, 20, 50];\\n        }\\n\\n        for (uint256 i = 0; i < usualNamesAndSymbols.length; i++) {\\n            Property property = new Property(\\n                usualNamesAndSymbols[i],\\n                usualNamesAndSymbols[i + 1],\\n                4,\\n                usualList[i / 2],\\n                priceStarts[i / 2],\\n                rentStarts[i / 2],\\n                priceChanges[i / 2]\\n            );\\n            // console.log(usualNamesAndSymbols[i], usualNamesAndSymbols[i + 1]);\\n            //Add all of the ERC20s to the game state\\n            idToGameState[_gameID].propertyList.push(property);\\n            i++;\\n        }\\n    }\\n\\n    function joinGame() external {\\n        if (gameID == 0) {\\n            revert(\\\"No games exist\\\");\\n        }\\n        uint256 curentGame = gameID - 1;\\n        address[] memory list = idToGameState[curentGame].players;\\n        for (uint i = 0; i < list.length; i++) {\\n            if (msg.sender == list[i]) {\\n                revert(\\\"Can not join twice\\\");\\n            }\\n        }\\n        idToGameState[curentGame].players.push(msg.sender);\\n        addressToGame[msg.sender] = curentGame;\\n        uint256 buyIn = idToGameState[curentGame].buyIn /\\n            idToGameState[curentGame].players.length;\\n        SafeERC20.safeTransferFrom(\\n            IERC20(idToGameState[curentGame].chosenCurrency),\\n            msg.sender,\\n            address(this),\\n            buyIn\\n        );\\n        idToGameState[curentGame].buyIn += buyIn;\\n\\n        idToGameState[curentGame].numberOfPlayers++;\\n    }\\n\\n    function getBuyIn() public view returns (uint256) {\\n        if (gameID == 0) {\\n            revert(\\\"No games exist\\\");\\n        }\\n        uint256 curentGame = gameID - 1;\\n        uint256 buyIn = idToGameState[curentGame].buyIn /\\n            idToGameState[curentGame].players.length;\\n        return buyIn;\\n    }\\n\\n    function startGame() external {\\n        //This just starts the most recently made game\\n        //This will begin the game for all players, and begin a move for the first player.\\n        if (gameID == 0) {\\n            revert(\\\"A game has not been setUp() yet\\\");\\n        }\\n        uint256 curentGameID = gameID - 1;\\n        userRoll[msg.sender] = true;\\n        idToGameState[curentGameID].currentPlayer = msg.sender;\\n        emit GameStarted(msg.sender, gameID);\\n        //Now we have to distribute moneys\\n        uint256 amount = getCurrencyInfo[\\n            idToGameState[curentGameID].chosenCurrency\\n        ].userStart;\\n        if (amount == 0) {\\n            amount = 70 * 10 ** 18;\\n        }\\n        for (uint i = 0; i < idToGameState[curentGameID].players.length; i++) {\\n            SafeERC20.safeTransfer(\\n                IERC20(idToGameState[curentGameID].chosenCurrency),\\n                idToGameState[curentGameID].players[i],\\n                amount\\n            );\\n        }\\n    }\\n\\n    function _rollDice(\\n        address user\\n    ) public returns (bool snake, uint256 total) {\\n        //Upon implementation add chainlink here\\n        uint256 dice1 = (uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)\\n            )\\n        ) % 6) + 1;\\n\\n        uint256 dice2 = (uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp,\\n                    block.prevrandao,\\n                    msg.sender,\\n                    dice1\\n                )\\n            )\\n        ) % 6) + 1;\\n        total = dice1 + dice2;\\n        emit RolledDice(user, dice1, dice2);\\n        if (dice1 == dice2) {\\n            snake = true;\\n        }\\n    }\\n\\n    function beginMove() external {\\n        require(gameID > 0, \\\"No Game Created\\\");\\n        uint256 currentGameID = addressToGame[msg.sender];\\n        console.log(idToGameState[currentGameID].currentPlayer, msg.sender);\\n        require(\\n            idToGameState[currentGameID].currentPlayer == msg.sender,\\n            \\\"Must be current Player\\\"\\n        );\\n\\n        require(userRoll[msg.sender], \\\"User cannot roll\\\");\\n        userRoll[msg.sender] = false;\\n        (bool rollAgain, uint256 stepsFoward) = _rollDice(msg.sender); //We would stop here and wait for chainlink to respnd if using it\\n        if (userInJail[msg.sender]) {\\n            if (rollAgain) {\\n                //User leaves jail\\n                userInJail[msg.sender] = false;\\n            }\\n            stepsFoward = 0;\\n            rollAgain = false;\\n        }\\n        console.log(stepsFoward, rollAgain);\\n        if (rollAgain) {\\n            userRoll[msg.sender] = true;\\n            userRollsRow[msg.sender]++;\\n            if (userRollsRow[msg.sender] > 3) {\\n                sendUserToJail(msg.sender);\\n            }\\n        }\\n\\n        _updatePlayerPosition(currentGameID, msg.sender, stepsFoward);\\n        if (!userRoll[msg.sender]) {\\n            //As long as the user cannot roll again then progress\\n            _incrementGameState(currentGameID);\\n        }\\n    }\\n\\n    function _incrementGameState(uint256 _gameID) internal {\\n        address newPlayer = _getNextPlayer(_gameID);\\n\\n        console.log(\\\"Changing player to\\\", newPlayer);\\n        address oldCurrentPlayer = idToGameState[_gameID].currentPlayer;\\n        console.log(\\\"player\\\", oldCurrentPlayer, newPlayer);\\n\\n        require(\\n            !userRoll[oldCurrentPlayer],\\n            \\\"can not change while a user can still roll\\\"\\n        );\\n        //Change current player\\n        //Reset their total number of rolls in a  row\\n        userRollsRow[oldCurrentPlayer] = 0;\\n\\n        idToGameState[_gameID].currentPlayer = newPlayer;\\n        // console.log(idToGameState[_gameID].currentPlayer);\\n        userRoll[newPlayer] = true;\\n    }\\n\\n    function _getNextPlayer(\\n        uint256 _gameID\\n    ) internal view returns (address newPlayer) {\\n        address oldCurrentPlayer = idToGameState[_gameID].currentPlayer;\\n        // console.log(\\\"Old player\\\", oldCurrentPlayer);\\n        uint i = 0;\\n        for (i = 0; i < idToGameState[_gameID].players.length; i++) {\\n            // console.log(idToGameState[_gameID].players[i]);\\n            if (idToGameState[_gameID].players[i] == oldCurrentPlayer) {\\n                break;\\n            }\\n        }\\n        uint256 nextIndex = (i + 1) % idToGameState[_gameID].players.length;\\n        //Lets say there are 3 players\\n        // 3 % 3\\n        return idToGameState[_gameID].players[nextIndex];\\n    }\\n\\n    function testMove(uint256 stepsFoward, bool rollAgain) external {\\n        require(gameID > 0, \\\"No Game Created\\\");\\n        uint256 currentGameID = addressToGame[msg.sender];\\n        // console.log(idToGameState[currentGameID].currentPlayer == msg.sender);\\n        require(\\n            idToGameState[currentGameID].currentPlayer == msg.sender,\\n            \\\"Must be current Player\\\"\\n        );\\n\\n        require(userRoll[msg.sender], \\\"User cannot roll\\\");\\n        userRoll[msg.sender] = false;\\n        // (bool rollAgain, uint256 steps)//We would stop here and wait for chainlink to respnd if using it\\n        if (userInJail[msg.sender]) {\\n            daysInJail[msg.sender]++;\\n            // console.log(daysInJail[msg.sender]);\\n            if (rollAgain || daysInJail[msg.sender] >= 2) {\\n                console.log(\\\"User leaves jail\\\");\\n                //User leaves jail\\n                userInJail[msg.sender] = false;\\n            }\\n            stepsFoward = 0;\\n            rollAgain = false;\\n        }\\n\\n        if (rollAgain) {\\n            userRoll[msg.sender] = true;\\n            userRollsRow[msg.sender]++;\\n            if (userRollsRow[msg.sender] > 3) {\\n                sendUserToJail(msg.sender);\\n            }\\n        }\\n\\n        _updatePlayerPosition(currentGameID, msg.sender, stepsFoward);\\n        _incrementGameState(currentGameID);\\n    }\\n\\n    // function fulfillRandomness(\\n    //     bytes32 requestId,\\n    //     uint256 randomness\\n    // ) internal override {\\n    //     randomResult = randomness;\\n    //     // Add additional logic to handle randomness\\n    // _updatePlayerPosition(currentGameID, msg.sender, stepsFoward);\\n    // }\\n\\n    function _updatePlayerPosition(\\n        uint256 _gameID,\\n        address player,\\n        uint256 stepsFoward\\n    ) internal {\\n        if (stepsFoward == 0) {\\n            return;\\n        }\\n        idToGameState[_gameID].playerPosition[player] += stepsFoward;\\n        if ( idToGameState[_gameID].playerPosition[player] >= MAX_STEPS) {\\n            emit CrossedGo(player);\\n            //Need to give the player moneys here!\\n            SafeERC20.safeTransfer(\\n                IERC20(idToGameState[_gameID].chosenCurrency),\\n                player,\\n                10 * 10 ** 18\\n            );\\n            //User arrived at the start\\n            idToGameState[_gameID].playerPosition[player] -= MAX_STEPS;\\n        }\\n        uint256 finalPosition = idToGameState[_gameID].playerPosition[player];\\n        if (finalPosition == 5) {\\n            //They are visiitng jail\\n            emit VisitJail(player);\\n            return;\\n        }\\n        if (finalPosition == 10) {\\n            //They are getting an air drop\\n            //Deposit their total number of steps up until that point\\n            if (1 == 2) {\\n                emit FoundAsSybil(player);\\n            } else {\\n                emit ReceivingAirdrop(player, stepsFoward * 10 ** 17);\\n                SafeERC20.safeTransfer(\\n                    IERC20(idToGameState[_gameID].chosenCurrency),\\n                    player,\\n                    stepsFoward * 10 ** 17\\n                );\\n            }\\n            return;\\n        }\\n        if (finalPosition == 15) {\\n            sendUserToJail(player);\\n            return;\\n        }\\n        if (finalPosition == 0) {\\n            return;\\n        }\\n        console.log(\\\"RE\\\", rentExists[finalPosition], finalPosition);\\n        if (rentExists[finalPosition]) {\\n            //Rent exists on this point, take money\\n            Property activeProp = getProperty(finalPosition);\\n            uint256 baseRent = activeProp.getBaseRent(finalPosition) * 10 ** 16;\\n            address[] memory userList = idToGameState[_gameID].players;\\n\\n            for (uint i = 0; i < userList.length; i++) {\\n                if (activeProp.balanceOf(userList[i]) > 0) {\\n                    //The user has money\\n                    uint256 userRent = (baseRent *\\n                        activeProp.balanceOf(userList[i])) /\\n                        activeProp.totalSupply();\\n                    if (\\n                        IERC20(idToGameState[_gameID].chosenCurrency).balanceOf(\\n                            player\\n                        ) < userRent\\n                    ) {\\n                        emit UserLose(player);\\n                        _removePlayer(player);\\n                        return;\\n                    }\\n                    SafeERC20.safeTransferFrom(\\n                        IERC20(idToGameState[_gameID].chosenCurrency),\\n                        player,\\n                        address(this),\\n                        userRent\\n                    );\\n                    SafeERC20.safeTransfer(\\n                        IERC20(idToGameState[_gameID].chosenCurrency),\\n                        userList[i],\\n                        userRent\\n                    );\\n                    emit RentPaid(player, userRent);\\n                    console.log(\\\"Transfer funds\\\", userRent);\\n                }\\n            }\\n        }\\n    }\\n\\n    function addNames(string[] memory list) public {\\n        require(list.length % 2 == 0, \\\"Must be even\\\");\\n        require(list.length > 0, \\\"Must have stuff \\\");\\n        usualNamesAndSymbols = list;\\n    }\\n\\n    function _removePlayer(address player) public {\\n        uint256 currentGame = addressToGame[player];\\n        uint256 playerIndex = idToGameState[currentGame].numberOfPlayers; // Set to an invalid index initially\\n\\n        // Find the index of the player in the array\\n        for (uint i = 0; i < idToGameState[currentGame].players.length; i++) {\\n            if (idToGameState[currentGame].players[i] == player) {\\n                playerIndex = i;\\n                break;\\n            }\\n        }\\n\\n        require(\\n            playerIndex < idToGameState[currentGame].numberOfPlayers,\\n            \\\"Player not found\\\"\\n        );\\n\\n        // Shift the elements to the left to fill the gap\\n        for (\\n            uint i = playerIndex;\\n            i < idToGameState[currentGame].players.length - 1;\\n            i++\\n        ) {\\n            idToGameState[currentGame].players[i] = idToGameState[currentGame]\\n                .players[i + 1];\\n        }\\n\\n        // Remove the last element (now a duplicate)\\n        idToGameState[currentGame].players.pop();\\n\\n        // Decrement the number of players\\n        console.log(idToGameState[currentGame].players.length);\\n        idToGameState[currentGame].numberOfPlayers--;\\n        console.log(idToGameState[currentGame].players.length);\\n        if (idToGameState[currentGame].players.length == 1) {\\n            //A player can win\\n            emit PlayerWon(\\n                player,\\n                IERC20(idToGameState[currentGame].chosenCurrency).balanceOf(\\n                    address(this)\\n                )\\n            );\\n\\n            SafeERC20.safeTransfer(\\n                IERC20(idToGameState[currentGame].chosenCurrency),\\n                player,\\n                IERC20(idToGameState[currentGame].chosenCurrency).balanceOf(\\n                    address(this)\\n                )\\n            );\\n        }\\n    }\\n\\n    function getProperty(uint256 position) public view returns (Property prop) {\\n        Property[] memory list = getActiveProperties();\\n        for (uint i = 0; i < list.length; i++) {\\n            if (list[i].canUserPurchase(position)) {\\n                return list[i];\\n            }\\n        }\\n        return Property(address(0));\\n    }\\n\\n    function purchaseProperty(\\n        uint256 amountToSpend,\\n        address property\\n    ) public returns (uint256) {\\n        uint256 currentGameID = addressToGame[msg.sender];\\n        PoolKey memory pk = addressToKey[property];\\n\\n        //Assume that the currency is token0 and the property is token1\\n        bool zeroForOne = true;\\n        uint160 sqrtPriceLimit = 1461446703485210103287273052203988822378723970342;\\n\\n        if (property < idToGameState[currentGameID].chosenCurrency) {\\n            zeroForOne = false;\\n            sqrtPriceLimit = 4295128740;\\n        }\\n        int256 amountSpecified = int256(amountToSpend);\\n        IPoolManager.SwapParams memory params = IPoolManager.SwapParams(\\n            zeroForOne,\\n            amountSpecified,\\n            sqrtPriceLimit\\n        );\\n        SafeERC20.safeTransferFrom(\\n            IERC20(idToGameState[currentGameID].chosenCurrency),\\n            msg.sender,\\n            address(this),\\n            amountToSpend\\n        );\\n        // console.log(\\\"Game\\\", address(this));\\n        SafeERC20.forceApprove(\\n            IERC20(idToGameState[currentGameID].chosenCurrency),\\n            address(mainHook),\\n            amountToSpend + 1\\n        );\\n\\n        (int256 amount0, int256 amount1) = mainHook.swap(\\n            pk,\\n            params,\\n            block.timestamp + 100,\\n            msg.sender\\n        );\\n        uint256 currentPosition = getPlayerPosition(msg.sender);\\n        console.log(\\\"Property purchased\\\", currentPosition);\\n        rentExists[currentPosition] = true;\\n\\n        SafeERC20.safeTransfer(\\n            IERC20(property),\\n            msg.sender,\\n            IERC20(property).balanceOf(address(this))\\n        );\\n    }\\n\\n    function sellProperty(\\n        uint256 amountToSell,\\n        address property\\n    ) public returns (uint256) {\\n        uint256 currentGameID = addressToGame[msg.sender];\\n        PoolKey memory pk = addressToKey[property];\\n\\n        //Assume that the currency is token0 and the property is token1\\n        bool zeroForOne = false;\\n        uint160 sqrtPriceLimit = 1461446703485210103287273052203988822378723970342;\\n\\n        if (property < idToGameState[currentGameID].chosenCurrency) {\\n            zeroForOne = true;\\n            sqrtPriceLimit = 4295128740;\\n        }\\n        int256 amountSpecified = int256(amountToSell);\\n\\n        IPoolManager.SwapParams memory params = IPoolManager.SwapParams(\\n            zeroForOne,\\n            amountSpecified,\\n            sqrtPriceLimit\\n        );\\n        SafeERC20.safeTransferFrom(\\n            IERC20(property),\\n            msg.sender,\\n            address(this),\\n            amountToSell\\n        );\\n        // console.log(\\\"Game\\\", address(this));\\n        SafeERC20.safeApprove(\\n            IERC20(property),\\n            address(mainHook),\\n            amountToSell\\n        );\\n\\n        (int256 amount0, int256 amount1) = mainHook.swap(\\n            pk,\\n            params,\\n            block.timestamp + 100,\\n            msg.sender\\n        );\\n        uint256 amountOwed = 0;\\n        if (amount0 < 0) {\\n            amountOwed = uint256(-1 * amount0);\\n        }\\n        if (amount1 < 0) {\\n            amountOwed = uint256(-1 * amount1);\\n        }\\n        uint256 currentPosition = getPlayerPosition(msg.sender);\\n        address[] memory userList = idToGameState[currentGameID].players;\\n\\n        rentExists[currentPosition] = false;\\n        for (uint i = 0; i < userList.length; i++) {\\n            if (Property(property).balanceOf(userList[i]) > 0) {\\n                rentExists[currentPosition] = true;\\n            }\\n        }\\n\\n        SafeERC20.safeTransfer(\\n            IERC20(idToGameState[currentGameID].chosenCurrency),\\n            msg.sender,\\n            amountOwed\\n        );\\n    }\\n\\n    mapping(address => uint256) public daysInJail;\\n    mapping(address => bool) public userInJail;\\n\\n    function sendUserToJail(address user) public {\\n        emit SentToJail(user);\\n        daysInJail[msg.sender] = 0;\\n        userInJail[user] = true;\\n    }\\n\\n    function getMyPosition() public view returns (uint256) {\\n        return getPlayerPosition(msg.sender);\\n    }\\n\\n    function getMyProperties() public view returns (Property[] memory) {\\n        Property[] memory list = getActiveProperties();\\n        uint count = 0;\\n\\n        // First pass: count properties owned by the sender\\n        for (uint i = 0; i < list.length; i++) {\\n            if (list[i].balanceOf(msg.sender) > 0) {\\n                count++;\\n            }\\n        }\\n\\n        // Initialize a new array with the correct size\\n        Property[] memory newList = new Property[](count);\\n        uint index = 0;\\n\\n        // Second pass: populate the array\\n        for (uint i = 0; i < list.length; i++) {\\n            if (list[i].balanceOf(msg.sender) > 0) {\\n                newList[index] = list[i];\\n                index++;\\n            }\\n        }\\n\\n        return newList;\\n    }\\n\\n    function getBalanceOfProperty(Property prop) public view returns (uint256) {\\n        return prop.balanceOf(msg.sender);\\n    }\\n\\n    function getAllProperties() public view returns (string[] memory list) {\\n        return usualNamesAndSymbols;\\n    }\\n\\n    function getActiveProperties()\\n        public\\n        view\\n        returns (Property[] memory list)\\n    {\\n        if (gameID == 0) {\\n            revert(\\\"No game yet\\\");\\n        }\\n        uint256 currentGameID = gameID - 1;\\n        return idToGameState[currentGameID].propertyList;\\n    }\\n\\n    //These are all of the helper fucntions for a game\\n    function getActiveNumberOfPlayers() public view returns (uint256) {\\n        if (gameID == 0) {\\n            return 0;\\n        }\\n        uint256 currentGameID = gameID - 1;\\n        return idToGameState[currentGameID].numberOfPlayers;\\n    }\\n\\n    function getActiveGameID() public view returns (uint256) {\\n        if (gameID == 0) {\\n            return 0;\\n        }\\n        uint256 currentGameID = gameID - 1;\\n        return currentGameID;\\n    }\\n\\n    function getActivePlayers() public view returns (address[] memory) {\\n        if (gameID == 0) {\\n            address[] memory list;\\n            return list;\\n        }\\n        uint256 currentGameID = gameID - 1;\\n        return idToGameState[currentGameID].players;\\n    }\\n\\n    function getCurrentChosenCurrency() public view returns (address) {\\n        if (gameID == 0) {\\n            return address(0);\\n        }\\n        uint256 currentGameID = gameID - 1;\\n        return idToGameState[currentGameID].chosenCurrency;\\n    }\\n\\n    function getCurrentPlayer() public view returns (address player) {\\n        if (gameID == 0) {\\n            return address(0);\\n        }\\n        uint256 currentGameID = gameID - 1;\\n        return idToGameState[currentGameID].currentPlayer;\\n    }\\n\\n    function returnPropertyUnderPlayer(\\n        address player\\n    ) public view returns (address) {\\n        uint256 currentGameID = addressToGame[player];\\n        uint256 positon = getPlayerPosition(player);\\n\\n        for (\\n            uint256 i = 0;\\n            i < idToGameState[currentGameID].propertyList.length;\\n            i++\\n        ) {\\n            Property property = idToGameState[currentGameID].propertyList[i];\\n            if (property.canUserPurchase(positon)) {\\n                return address(property);\\n            }\\n        }\\n        return address(0);\\n    }\\n\\n    function getPlayerPosition(\\n        address user\\n    ) public view returns (uint256 position) {\\n        if (gameID == 0) {\\n            return 0;\\n        }\\n        uint256 currentGameID = gameID - 1;\\n        return idToGameState[currentGameID].playerPosition[user];\\n    }\\n\\n    function getBankBalance() public view returns (uint256 balance) {\\n        if (gameID == 0) {\\n            return 0;\\n        }\\n        uint256 currentGameID = gameID - 1;\\n        return\\n            IERC20(idToGameState[currentGameID].chosenCurrency).balanceOf(\\n                address(this)\\n            );\\n    }\\n}\\n\\n//Idea for how game is going to work\\n//There are 8 different property groups\\n// There are railways\\n//Community Chests & Chance Cards\\n//Free Parking\\n//Jail\\n//Go\\n\\n//The struct will contain all of the players\\n//Lets say there are four players\\n\\n//We use ChainLink for getting Dice\\n\",\"keccak256\":\"0x3b1efbb300f91505b155706c9a22fd89aa137f940bc6a696216f26e1e2a4504d\",\"license\":\"MIT\"},\"contracts/TokenTown/IGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Property} from \\\"./Property.sol\\\";\\n\\ninterface IGame {\\n    //Below are the events\\n    event GameStarted(address indexed starter, uint256 gameStarted);\\n    event GameEnded(address indexed ender);\\n    event GamePlayed(address indexed player);\\n    event CrossedGo(address indexed player);\\n    event RolledDice(address indexed player, uint256 dice1, uint256 dice2);\\n    event VisitJail(address indexed player);\\n    event SentToJail(address indexed player);\\n    event PlayerWon(address indexed player, uint256 amount);\\n    event ReceivingAirdrop(address indexed player, uint256 amount);\\n    event FoundAsSybil(address indexed player);\\n    event RentPaid(address indexed player, uint256 amount);\\n    event UserLose(address indexed player);\\n\\n    type player is address;\\n\\n    //Below are the structs\\n    struct GameState {\\n        address currentPlayer; //This is the player that is rolling\\n        address[] players; //Array of the players in the game\\n        uint256 numberOfPlayers; //The total number of players\\n        address chosenCurrency; //The chosen currency (e.g HypApeCoin or USDC)\\n        mapping(address => uint256) playerPosition; //Goes from player address to position on board\\n        mapping(address => address) playerOwnedProperty;\\n        Property[] propertyList; //List of all properties\\n        uint256 buyIn;\\n    }\\n}\\n\",\"keccak256\":\"0x36bf4e390bf3ead0274ec369439c922084efddc4b47cad93555f6045fb946eeb\",\"license\":\"MIT\"},\"contracts/TokenTown/Property.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Property is ERC20 {\\n    mapping(address => uint256) userToHouse; //This records how many houses a user has\\n    address immutable theBank;\\n\\n    uint256 position; //Marks the start\\n    uint256 priceStart = 0;\\n    uint256 rentStart = 0;\\n    uint256 priceIncrease = 0;\\n    uint256 length = 4;\\n\\n    constructor(\\n        string memory name,\\n        string memory symb,\\n        uint256 supply,\\n        uint256 _position,\\n        uint256 _price,\\n        uint256 _rent,\\n        uint256 _increase\\n    ) ERC20(name, symb) {\\n        _mint(msg.sender, supply * 10 ** 18);\\n        // console.log(\\\"set token\\\", _price, _increase);\\n        theBank = msg.sender;\\n        position = _position;\\n        priceStart = _price;\\n        rentStart = _rent;\\n        priceIncrease = _increase;\\n    }\\n\\n    modifier onlyBank() {\\n        require(msg.sender == theBank);\\n        _;\\n    }\\n\\n    function addHouse(address user) public onlyBank {\\n        userToHouse[user]++;\\n    }\\n\\n    function getBaseRent(\\n        uint256 playerPoint\\n    ) public view returns (uint256 rent) {\\n        uint256 amountAfter = playerPoint - position;\\n        rent = rentStart + priceIncrease * amountAfter;\\n        console.log(rentStart, priceIncrease, amountAfter);\\n        return rent;\\n    }\\n\\n    function getPrice(uint256 playerPoint) public view returns (uint256 price) {\\n        uint256 amountAfter = playerPoint - position;\\n        price = priceStart + priceIncrease * amountAfter;\\n        console.log(priceStart, priceIncrease, amountAfter);\\n        return price;\\n    }\\n\\n    function canUserPurchase(uint256 userPosition) public view returns (bool) {\\n        if (position <= userPosition && userPosition <= position + length) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getPriceStart() public view returns (uint256) {\\n        return priceStart;\\n    }\\n\\n    function getPriceIncrease() public view returns (uint256) {\\n        return priceIncrease;\\n    }\\n}\\n\",\"keccak256\":\"0x6219cf63df387c9331831e5d3a294c2dd1c36ea2b6dc81f1d8e76ec4d4de28da\",\"license\":\"MIT\"},\"contracts/Uniswap/V4-Core/interfaces/IFees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {Currency} from \\\"../types/Currency.sol\\\";\\n\\ninterface IFees {\\n    /// @notice Thrown when the protocol fee denominator is less than 4. Also thrown when the static or dynamic fee on a pool is exceeds 100%.\\n    error FeeTooLarge();\\n    /// @notice Thrown when not enough gas is provided to look up the protocol fee\\n    error ProtocolFeeCannotBeFetched();\\n    /// @notice Thrown when the call to fetch the protocol fee reverts or returns invalid data.\\n    error ProtocolFeeControllerCallFailedOrInvalidResult();\\n    /// @notice Thrown when a pool does not have a dynamic fee.\\n    error FeeNotDynamic();\\n\\n    event ProtocolFeeControllerUpdated(address protocolFeeController);\\n\\n    /// @notice Returns the minimum denominator for the protocol fee, which restricts it to a maximum of 25%\\n    function MIN_PROTOCOL_FEE_DENOMINATOR() external view returns (uint8);\\n\\n    /// @notice Given a currency address, returns the protocol fees accrued in that currency\\n    function protocolFeesAccrued(Currency) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x258a0d4d7e4af7ef84175c8954dba586879222395e218926a223dda40780e40e\",\"license\":\"MIT\"},\"contracts/Uniswap/V4-Core/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\nimport {BalanceDelta} from \\\"../types/BalanceDelta.sol\\\";\\nimport {IPoolManager} from \\\"./IPoolManager.sol\\\";\\n\\n/// @notice The PoolManager contract decides whether to invoke specific hooks by inspecting the leading bits\\n/// of the hooks contract address. For example, a 1 bit in the first bit of the address will\\n/// cause the 'before swap' hook to be invoked. See the Hooks library for the full spec.\\n/// @dev Should only be callable by the v4 PoolManager.\\ninterface IHooks {\\n    /// @notice The hook called before the state of a pool is initialized\\n    /// @param sender The initial msg.sender for the initialize call\\n    /// @param key The key for the pool being initialized\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\\n    /// @param hookData Arbitrary data handed into the PoolManager by the initializer to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeInitialize(address sender, PoolKey calldata key, uint160 sqrtPriceX96, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /// @notice The hook called after the state of a pool is initialized\\n    /// @param sender The initial msg.sender for the initialize call\\n    /// @param key The key for the pool being initialized\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\\n    /// @param tick The current tick after the state of a pool is initialized\\n    /// @param hookData Arbitrary data handed into the PoolManager by the initializer to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function afterInitialize(\\n        address sender,\\n        PoolKey calldata key,\\n        uint160 sqrtPriceX96,\\n        int24 tick,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called before liquidity is added\\n    /// @param sender The initial msg.sender for the add liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for adding liquidity\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidty provider to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeAddLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after liquidity is added\\n    /// @param sender The initial msg.sender for the add liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for adding liquidity\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidty provider to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function afterAddLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        BalanceDelta delta,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called before liquidity is removed\\n    /// @param sender The initial msg.sender for the remove liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for removing liquidity\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidty provider to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeRemoveLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after liquidity is removed\\n    /// @param sender The initial msg.sender for the remove liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for removing liquidity\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidty provider to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function afterRemoveLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        BalanceDelta delta,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called before a swap\\n    /// @param sender The initial msg.sender for the swap call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for the swap\\n    /// @param hookData Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeSwap(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after a swap\\n    /// @param sender The initial msg.sender for the swap call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for the swap\\n    /// @param delta The amount owed to the locker (positive) or owed to the pool (negative)\\n    /// @param hookData Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function afterSwap(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata params,\\n        BalanceDelta delta,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called before donate\\n    /// @param sender The initial msg.sender for the donate call\\n    /// @param key The key for the pool\\n    /// @param amount0 The amount of token0 being donated\\n    /// @param amount1 The amount of token1 being donated\\n    /// @param hookData Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeDonate(\\n        address sender,\\n        PoolKey calldata key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after donate\\n    /// @param sender The initial msg.sender for the donate call\\n    /// @param key The key for the pool\\n    /// @param amount0 The amount of token0 being donated\\n    /// @param amount1 The amount of token1 being donated\\n    /// @param hookData Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function afterDonate(\\n        address sender,\\n        PoolKey calldata key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2945308da700faaf6c956e0fb67bbc1880af1ed1e04a086e8cb2f2268747f31a\",\"license\":\"MIT\"},\"contracts/Uniswap/V4-Core/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Currency} from \\\"../types/Currency.sol\\\";\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\nimport {Pool} from \\\"../libraries/Pool.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\nimport {IERC6909Claims} from \\\"./external/IERC6909Claims.sol\\\";\\nimport {IFees} from \\\"./IFees.sol\\\";\\nimport {BalanceDelta} from \\\"../types/BalanceDelta.sol\\\";\\nimport {PoolId} from \\\"../types/PoolId.sol\\\";\\nimport {Position} from \\\"../libraries/Position.sol\\\";\\n\\ninterface IPoolManager is IFees, IERC6909Claims {\\n    /// @notice Thrown when currencies touched has exceeded max of 256\\n    error MaxCurrenciesTouched();\\n\\n    /// @notice Thrown when a currency is not netted out after a lock\\n    error CurrencyNotSettled();\\n\\n    /// @notice Thrown when trying to interact with a non-initialized pool\\n    error PoolNotInitialized();\\n\\n    /// @notice Thrown when lock is called, but a lock is already open\\n    error AlreadyLocked();\\n\\n    /// @notice Thrown when a function is called outside of a lock\\n    error ManagerNotLocked();\\n\\n    /// @notice The ERC1155 being deposited is not the Uniswap ERC1155\\n    error NotPoolManagerToken();\\n\\n    /// @notice Pools are limited to type(int16).max tickSpacing in #initialize, to prevent overflow\\n    error TickSpacingTooLarge();\\n    /// @notice Pools must have a positive non-zero tickSpacing passed to #initialize\\n    error TickSpacingTooSmall();\\n\\n    /// @notice PoolKey must have currencies where address(currency0) < address(currency1)\\n    error CurrenciesOutOfOrderOrEqual();\\n\\n    /// @notice Emitted when a new pool is initialized\\n    /// @param id The abi encoded hash of the pool key struct for the new pool\\n    /// @param currency0 The first currency of the pool by address sort order\\n    /// @param currency1 The second currency of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param hooks The hooks contract address for the pool, or address(0) if none\\n    event Initialize(\\n        PoolId indexed id,\\n        Currency indexed currency0,\\n        Currency indexed currency1,\\n        uint24 fee,\\n        int24 tickSpacing,\\n        IHooks hooks\\n    );\\n\\n    /// @notice Emitted when a liquidity position is modified\\n    /// @param id The abi encoded hash of the pool key struct for the pool that was modified\\n    /// @param sender The address that modified the pool\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param liquidityDelta The amount of liquidity that was added or removed\\n    event ModifyLiquidity(\\n        PoolId indexed id,\\n        address indexed sender,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int256 liquidityDelta\\n    );\\n\\n    /// @notice Emitted for swaps between currency0 and currency1\\n    /// @param id The abi encoded hash of the pool key struct for the pool that was modified\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param amount0 The delta of the currency0 balance of the pool\\n    /// @param amount1 The delta of the currency1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of the price of the pool after the swap\\n    event Swap(\\n        PoolId indexed id,\\n        address indexed sender,\\n        int128 amount0,\\n        int128 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick,\\n        uint24 fee\\n    );\\n\\n    event ProtocolFeeUpdated(PoolId indexed id, uint16 protocolFee);\\n\\n    event DynamicSwapFeeUpdated(PoolId indexed id, uint24 dynamicSwapFee);\\n\\n    /// @notice Returns the constant representing the maximum tickSpacing for an initialized pool key\\n    function MAX_TICK_SPACING() external view returns (int24);\\n\\n    /// @notice Returns the constant representing the minimum tickSpacing for an initialized pool key\\n    function MIN_TICK_SPACING() external view returns (int24);\\n\\n    /// @notice Get the current value in slot0 of the given pool\\n    function getSlot0(\\n        PoolId id\\n    )\\n        external\\n        view\\n        returns (uint160 sqrtPriceX96, int24 tick, uint16 protocolFee);\\n\\n    /// @notice Get the current value of liquidity of the given pool\\n    function getLiquidity(PoolId id) external view returns (uint128 liquidity);\\n\\n    /// @notice Get the current value of liquidity for the specified pool and position\\n    function getLiquidity(\\n        PoolId id,\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) external view returns (uint128 liquidity);\\n\\n    /// @notice Getter for TickInfo for the given poolId and tick\\n    function getPoolTickInfo(\\n        PoolId id,\\n        int24 tick\\n    ) external view returns (Pool.TickInfo memory);\\n\\n    /// @notice Getter for the bitmap given the poolId and word position\\n    function getPoolBitmapInfo(\\n        PoolId id,\\n        int16 word\\n    ) external view returns (uint256 tickBitmap);\\n\\n    /// @notice Get the position struct for a specified pool and position\\n    function getPosition(\\n        PoolId id,\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) external view returns (Position.Info memory position);\\n\\n    /// @notice Returns the reserves for a given ERC20 currency\\n    function reservesOf(Currency currency) external view returns (uint256);\\n\\n    /// @notice Returns the locker of the pool\\n    function getLocker() external view returns (address locker);\\n\\n    /// @notice Returns the number of nonzero deltas open on the PoolManager that must be zerod by the close of the initial lock.\\n    function getLockNonzeroDeltaCount()\\n        external\\n        view\\n        returns (uint256 _nonzeroDeltaCount);\\n\\n    /// @notice Initialize the state for a given pool ID\\n    function initialize(\\n        PoolKey memory key,\\n        uint160 sqrtPriceX96,\\n        bytes calldata hookData\\n    ) external returns (int24 tick);\\n\\n    /// @notice Get the current delta for a locker in the given currency\\n    /// @param locker The address of the locker\\n    /// @param currency The currency for which to lookup the delta\\n    function currencyDelta(\\n        address locker,\\n        Currency currency\\n    ) external view returns (int256);\\n\\n    /// @notice All operations go through this function\\n    /// @param data Any data to pass to the callback, via `ILockCallback(msg.sender).lockAcquired(data)`\\n    /// @return The data returned by the call to `ILockCallback(msg.sender).lockAcquired(data)`\\n    function lock(bytes calldata data) external payable returns (bytes memory);\\n\\n    struct ModifyLiquidityParams {\\n        // the lower and upper tick of the position\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // how to modify the liquidity\\n        int256 liquidityDelta;\\n    }\\n\\n    /// @notice Modify the liquidity for the given pool\\n    /// @dev Poke by calling with a zero liquidityDelta\\n    /// @param key The pool to modify liquidity in\\n    /// @param params The parameters for modifying the liquidity\\n    /// @param hookData Any data to pass to the callback, via `ILockCallback(msg.sender).lockAcquired(data)`\\n    /// @return delta The balance delta of the liquidity\\n    function modifyLiquidity(\\n        PoolKey memory key,\\n        ModifyLiquidityParams memory params,\\n        bytes calldata hookData\\n    ) external returns (BalanceDelta);\\n\\n    struct SwapParams {\\n        bool zeroForOne;\\n        int256 amountSpecified;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swap against the given pool\\n    function swap(\\n        PoolKey memory key,\\n        SwapParams memory params,\\n        bytes calldata hookData\\n    ) external returns (BalanceDelta);\\n\\n    /// @notice Donate the given currency amounts to the pool with the given pool key\\n    function donate(\\n        PoolKey memory key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) external returns (BalanceDelta);\\n\\n    /// @notice Called by the user to net out some value owed to the user\\n    /// @dev Can also be used as a mechanism for _free_ flash loans\\n    function take(Currency currency, address to, uint256 amount) external;\\n\\n    /// @notice Called by the user to move value into ERC6909 balance\\n    function mint(address to, uint256 id, uint256 amount) external;\\n\\n    /// @notice Called by the user to move value from ERC6909 balance\\n    function burn(address from, uint256 id, uint256 amount) external;\\n\\n    /// @notice Called by the user to pay what is owed\\n    function settle(Currency token) external payable returns (uint256 paid);\\n\\n    /// @notice Sets the protocol's swap fee for the given pool\\n    /// Protocol fees are always a portion of the LP swap fee that is owed. If that fee is 0, no protocol fees will accrue even if it is set to > 0.\\n    function setProtocolFee(PoolKey memory key) external;\\n\\n    /// @notice Updates the pools swap fees for the a pool that has enabled dynamic swap fees.\\n    function updateDynamicSwapFee(PoolKey memory key) external;\\n\\n    /// @notice Called by external contracts to access granular pool state\\n    /// @param slot Key of slot to sload\\n    /// @return value The value of the slot as bytes32\\n    function extsload(bytes32 slot) external view returns (bytes32 value);\\n\\n    /// @notice Called by external contracts to access granular pool state\\n    /// @param slot Key of slot to start sloading from\\n    /// @param nSlots Number of slots to load into return value\\n    /// @return value The value of the sload-ed slots concatenated as dynamic bytes\\n    function extsload(\\n        bytes32 slot,\\n        uint256 nSlots\\n    ) external view returns (bytes memory value);\\n}\\n\",\"keccak256\":\"0x9875f91f04abee14def3d63b0544bdf2bc7d0ca63213857934848d8c9deccdf6\",\"license\":\"MIT\"},\"contracts/Uniswap/V4-Core/interfaces/external/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8dc5ee72426906aeb12f4ae6a2426df059491739bd5cbdb8ea4a3e26970436c6\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/V4-Core/interfaces/external/IERC6909Claims.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IERC6909Claims {\\n    /// @notice Owner balance of an id.\\n    /// @param owner The address of the owner.\\n    /// @param id The id of the token.\\n    /// @return amount The balance of the token.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 amount);\\n\\n    /// @notice Spender allowance of an id.\\n    /// @param owner The address of the owner.\\n    /// @param spender The address of the spender.\\n    /// @param id The id of the token.\\n    /// @return amount The allowance of the token.\\n    function allowance(address owner, address spender, uint256 id) external view returns (uint256 amount);\\n\\n    /// @notice Checks if a spender is approved by an owner as an operator\\n    /// @param owner The address of the owner.\\n    /// @param spender The address of the spender.\\n    /// @return approved The approval status.\\n    function isOperator(address owner, address spender) external view returns (bool approved);\\n\\n    /// @notice Transfers an amount of an id from the caller to a receiver.\\n    /// @param receiver The address of the receiver.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    function transfer(address receiver, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers an amount of an id from a sender to a receiver.\\n    /// @param sender The address of the sender.\\n    /// @param receiver The address of the receiver.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    function transferFrom(address sender, address receiver, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Approves an amount of an id to a spender.\\n    /// @param spender The address of the spender.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    function approve(address spender, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Sets or removes a spender as an operator for the caller.\\n    /// @param spender The address of the spender.\\n    /// @param approved The approval status.\\n    function setOperator(address spender, bool approved) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1d53aa307e997fd73e1a31abe1052aad574994627958399375f760b8a750afbc\",\"license\":\"MIT\"},\"contracts/Uniswap/V4-Core/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        unchecked {\\n            if (x >= 0x100000000000000000000000000000000) {\\n                x >>= 128;\\n                r += 128;\\n            }\\n            if (x >= 0x10000000000000000) {\\n                x >>= 64;\\n                r += 64;\\n            }\\n            if (x >= 0x100000000) {\\n                x >>= 32;\\n                r += 32;\\n            }\\n            if (x >= 0x10000) {\\n                x >>= 16;\\n                r += 16;\\n            }\\n            if (x >= 0x100) {\\n                x >>= 8;\\n                r += 8;\\n            }\\n            if (x >= 0x10) {\\n                x >>= 4;\\n                r += 4;\\n            }\\n            if (x >= 0x4) {\\n                x >>= 2;\\n                r += 2;\\n            }\\n            if (x >= 0x2) r += 1;\\n        }\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        unchecked {\\n            r = 255;\\n            if (x & type(uint128).max > 0) {\\n                r -= 128;\\n            } else {\\n                x >>= 128;\\n            }\\n            if (x & type(uint64).max > 0) {\\n                r -= 64;\\n            } else {\\n                x >>= 64;\\n            }\\n            if (x & type(uint32).max > 0) {\\n                r -= 32;\\n            } else {\\n                x >>= 32;\\n            }\\n            if (x & type(uint16).max > 0) {\\n                r -= 16;\\n            } else {\\n                x >>= 16;\\n            }\\n            if (x & type(uint8).max > 0) {\\n                r -= 8;\\n            } else {\\n                x >>= 8;\\n            }\\n            if (x & 0xf > 0) {\\n                r -= 4;\\n            } else {\\n                x >>= 4;\\n            }\\n            if (x & 0x3 > 0) {\\n                r -= 2;\\n            } else {\\n                x >>= 2;\\n            }\\n            if (x & 0x1 > 0) r -= 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x652cd36970d953b3067c766b3b0c0063d4c403eba7352df09ec10dcc868910d9\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/V4-Core/libraries/FeeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\nlibrary FeeLibrary {\\n    uint24 public constant STATIC_FEE_MASK = 0x0FFFFF;\\n    uint24 public constant DYNAMIC_FEE_FLAG = 0x800000; // 1000\\n\\n    function isDynamicFee(uint24 self) internal pure returns (bool) {\\n        return self & DYNAMIC_FEE_FLAG != 0;\\n    }\\n\\n    function isStaticFeeTooLarge(uint24 self) internal pure returns (bool) {\\n        return self & STATIC_FEE_MASK >= 1000000;\\n    }\\n\\n    function getStaticFee(uint24 self) internal pure returns (uint24) {\\n        return self & STATIC_FEE_MASK;\\n    }\\n}\\n\",\"keccak256\":\"0x47f19ee7f8883b015e5976bdea208257ea6456c1d83b976148220b4a8ab2cc7e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/V4-Core/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x1f015a7a107f4c471985a958f1bfbc1710948f9bcd3786a02310bc0ad5080c69\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/V4-Core/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x7731aeeba692b0ca5dac8f27803ec9e5ce98795a554c09ae05c220861bd0314e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/V4-Core/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0 = a * b; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the preconditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d8760794ed38264579c5da7b2afe8ff5543de999180850bc08687b77dce36ea\",\"license\":\"MIT\"},\"contracts/Uniswap/V4-Core/libraries/Hooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\nimport {IHooks} from \\\"../interfaces/IHooks.sol\\\";\\nimport {FeeLibrary} from \\\"./FeeLibrary.sol\\\";\\nimport {BalanceDelta} from \\\"../types/BalanceDelta.sol\\\";\\nimport {IPoolManager} from \\\"../interfaces/IPoolManager.sol\\\";\\nimport {Locker} from \\\"./Locker.sol\\\";\\n\\n/// @notice V4 decides whether to invoke specific hooks by inspecting the leading bits of the address that\\n/// the hooks contract is deployed to.\\n/// For example, a hooks contract deployed to address: 0x9000000000000000000000000000000000000000\\n/// has leading bits '1001' which would cause the 'before initialize' and 'after add liquidity' hooks to be used.\\nlibrary Hooks {\\n    using FeeLibrary for uint24;\\n    using Hooks for IHooks;\\n\\n    uint256 internal constant BEFORE_INITIALIZE_FLAG = 1 << 159; //1\\n    uint256 internal constant AFTER_INITIALIZE_FLAG = 1 << 158; //2\\n    uint256 internal constant BEFORE_ADD_LIQUIDITY_FLAG = 1 << 157; //3\\n    uint256 internal constant AFTER_ADD_LIQUIDITY_FLAG = 1 << 156; //4\\n    uint256 internal constant BEFORE_REMOVE_LIQUIDITY_FLAG = 1 << 155; //5\\n    uint256 internal constant AFTER_REMOVE_LIQUIDITY_FLAG = 1 << 154; //6\\n    uint256 internal constant BEFORE_SWAP_FLAG = 1 << 153; //7\\n    uint256 internal constant AFTER_SWAP_FLAG = 1 << 152; //8\\n    uint256 internal constant BEFORE_DONATE_FLAG = 1 << 151; //9\\n    uint256 internal constant AFTER_DONATE_FLAG = 1 << 150; //10\\n    uint256 internal constant NO_OP_FLAG = 1 << 149; //11\\n\\n    bytes4 public constant NO_OP_SELECTOR =\\n        bytes4(keccak256(abi.encodePacked(\\\"NoOp\\\")));\\n\\n    struct Permissions {\\n        bool beforeInitialize;\\n        bool afterInitialize;\\n        bool beforeAddLiquidity;\\n        bool afterAddLiquidity;\\n        bool beforeRemoveLiquidity;\\n        bool afterRemoveLiquidity;\\n        bool beforeSwap;\\n        bool afterSwap;\\n        bool beforeDonate;\\n        bool afterDonate;\\n        bool noOp;\\n    }\\n\\n    /// @notice Thrown if the address will not lead to the specified hook calls being called\\n    /// @param hooks The address of the hooks contract\\n    error HookAddressNotValid(address hooks);\\n\\n    /// @notice Hook did not return its selector\\n    error InvalidHookResponse();\\n\\n    /// @notice thrown when a hook call fails\\n    error FailedHookCall();\\n\\n    /// @notice Utility function intended to be used in hook constructors to ensure\\n    /// the deployed hooks address causes the intended hooks to be called\\n    /// @param permissions The hooks that are intended to be called\\n    /// @dev permissions param is memory as the function will be called from constructors\\n    function validateHookPermissions(\\n        IHooks self,\\n        Permissions memory permissions\\n    ) internal pure {\\n        if (\\n            permissions.beforeInitialize !=\\n            self.hasPermission(BEFORE_INITIALIZE_FLAG) ||\\n            permissions.afterInitialize !=\\n            self.hasPermission(AFTER_INITIALIZE_FLAG) ||\\n            permissions.beforeAddLiquidity !=\\n            self.hasPermission(BEFORE_ADD_LIQUIDITY_FLAG) ||\\n            permissions.afterAddLiquidity !=\\n            self.hasPermission(AFTER_ADD_LIQUIDITY_FLAG) ||\\n            permissions.beforeRemoveLiquidity !=\\n            self.hasPermission(BEFORE_REMOVE_LIQUIDITY_FLAG) ||\\n            permissions.afterRemoveLiquidity !=\\n            self.hasPermission(AFTER_REMOVE_LIQUIDITY_FLAG) ||\\n            permissions.beforeSwap != self.hasPermission(BEFORE_SWAP_FLAG) ||\\n            permissions.afterSwap != self.hasPermission(AFTER_SWAP_FLAG) ||\\n            permissions.beforeDonate !=\\n            self.hasPermission(BEFORE_DONATE_FLAG) ||\\n            permissions.afterDonate != self.hasPermission(AFTER_DONATE_FLAG) ||\\n            permissions.noOp != self.hasPermission(NO_OP_FLAG)\\n        ) {\\n            revert HookAddressNotValid(address(self));\\n        }\\n    }\\n\\n    /// @notice Ensures that the hook address includes at least one hook flag or dynamic fees, or is the 0 address\\n    /// @param hook The hook to verify\\n    function isValidHookAddress(\\n        IHooks hook,\\n        uint24 fee\\n    ) internal pure returns (bool) {\\n        // if NoOp is allowed, at least one of beforeRemoveLiquidity, beforeAddLiquidity, beforeSwap and beforeDonate should be allowed\\n        if (\\n            hook.hasPermission(NO_OP_FLAG) &&\\n            !hook.hasPermission(BEFORE_ADD_LIQUIDITY_FLAG) &&\\n            !hook.hasPermission(BEFORE_REMOVE_LIQUIDITY_FLAG) &&\\n            !hook.hasPermission(BEFORE_SWAP_FLAG) &&\\n            !hook.hasPermission(BEFORE_DONATE_FLAG)\\n        ) {\\n            return false;\\n        }\\n        // If there is no hook contract set, then fee cannot be dynamic\\n        // If a hook contract is set, it must have at least 1 flag set, or have a dynamic fee\\n        return\\n            address(hook) == address(0)\\n                ? !fee.isDynamicFee()\\n                : (uint160(address(hook)) >= NO_OP_FLAG || fee.isDynamicFee());\\n    }\\n\\n    /// @notice performs a hook call using the given calldata on the given hook\\n    /// @return expectedSelector The selector that the hook is expected to return\\n    /// @return selector The selector that the hook actually returned\\n    function _callHook(\\n        IHooks self,\\n        bytes memory data\\n    ) private returns (bytes4 expectedSelector, bytes4 selector) {\\n        assembly {\\n            expectedSelector := mload(add(data, 0x20))\\n        }\\n\\n        (bool success, bytes memory result) = address(self).call(data);\\n        if (!success) _revert(result);\\n\\n        selector = abi.decode(result, (bytes4));\\n    }\\n\\n    /// @notice performs a hook call using the given calldata on the given hook\\n    function callHook(IHooks self, bytes memory data) internal {\\n        (bytes4 expectedSelector, bytes4 selector) = _callHook(self, data);\\n\\n        if (selector != expectedSelector) {\\n            revert InvalidHookResponse();\\n        }\\n    }\\n\\n    /// @notice performs a hook call using the given calldata on the given hook\\n    /// @return shouldExecute Whether the operation should be executed or nooped\\n    function callHookNoopable(\\n        IHooks self,\\n        bytes memory data\\n    ) internal returns (bool shouldExecute) {\\n        (bytes4 expectedSelector, bytes4 selector) = _callHook(self, data);\\n\\n        if (selector == expectedSelector) {\\n            shouldExecute = true;\\n        } else if (\\n            selector == NO_OP_SELECTOR && self.hasPermission(NO_OP_FLAG)\\n        ) {\\n            shouldExecute = false;\\n        } else {\\n            revert InvalidHookResponse();\\n        }\\n    }\\n\\n    /// @notice calls beforeInitialize hook if permissioned and validates return value\\n    function beforeInitialize(\\n        IHooks self,\\n        PoolKey memory key,\\n        uint160 sqrtPriceX96,\\n        bytes calldata hookData\\n    ) internal {\\n        if (self.hasPermission(BEFORE_INITIALIZE_FLAG)) {\\n            self.callHook(\\n                abi.encodeWithSelector(\\n                    IHooks.beforeInitialize.selector,\\n                    msg.sender,\\n                    key,\\n                    sqrtPriceX96,\\n                    hookData\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @notice calls afterInitialize hook if permissioned and validates return value\\n    function afterInitialize(\\n        IHooks self,\\n        PoolKey memory key,\\n        uint160 sqrtPriceX96,\\n        int24 tick,\\n        bytes calldata hookData\\n    ) internal {\\n        if (self.hasPermission(AFTER_INITIALIZE_FLAG)) {\\n            self.callHook(\\n                abi.encodeWithSelector(\\n                    IHooks.afterInitialize.selector,\\n                    msg.sender,\\n                    key,\\n                    sqrtPriceX96,\\n                    tick,\\n                    hookData\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @notice calls beforeModifyLiquidity hook if permissioned and validates return value\\n    function beforeModifyLiquidity(\\n        IHooks self,\\n        PoolKey memory key,\\n        IPoolManager.ModifyLiquidityParams memory params,\\n        bytes calldata hookData\\n    ) internal returns (bool shouldExecute) {\\n        if (\\n            params.liquidityDelta > 0 &&\\n            key.hooks.hasPermission(BEFORE_ADD_LIQUIDITY_FLAG)\\n        ) {\\n            shouldExecute = self.callHookNoopable(\\n                abi.encodeWithSelector(\\n                    IHooks.beforeAddLiquidity.selector,\\n                    msg.sender,\\n                    key,\\n                    params,\\n                    hookData\\n                )\\n            );\\n        } else if (\\n            params.liquidityDelta <= 0 &&\\n            key.hooks.hasPermission(BEFORE_REMOVE_LIQUIDITY_FLAG)\\n        ) {\\n            shouldExecute = self.callHookNoopable(\\n                abi.encodeWithSelector(\\n                    IHooks.beforeRemoveLiquidity.selector,\\n                    msg.sender,\\n                    key,\\n                    params,\\n                    hookData\\n                )\\n            );\\n        } else {\\n            shouldExecute = true;\\n        }\\n    }\\n\\n    /// @notice calls afterModifyLiquidity hook if permissioned and validates return value\\n    function afterModifyLiquidity(\\n        IHooks self,\\n        PoolKey memory key,\\n        IPoolManager.ModifyLiquidityParams memory params,\\n        BalanceDelta delta,\\n        bytes calldata hookData\\n    ) internal {\\n        if (\\n            params.liquidityDelta > 0 &&\\n            key.hooks.hasPermission(AFTER_ADD_LIQUIDITY_FLAG)\\n        ) {\\n            self.callHook(\\n                abi.encodeWithSelector(\\n                    IHooks.afterAddLiquidity.selector,\\n                    msg.sender,\\n                    key,\\n                    params,\\n                    delta,\\n                    hookData\\n                )\\n            );\\n        } else if (\\n            params.liquidityDelta <= 0 &&\\n            key.hooks.hasPermission(AFTER_REMOVE_LIQUIDITY_FLAG)\\n        ) {\\n            self.callHook(\\n                abi.encodeWithSelector(\\n                    IHooks.afterRemoveLiquidity.selector,\\n                    msg.sender,\\n                    key,\\n                    params,\\n                    delta,\\n                    hookData\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @notice calls beforeSwap hook if permissioned and validates return value\\n    function beforeSwap(\\n        IHooks self,\\n        PoolKey memory key,\\n        IPoolManager.SwapParams memory params,\\n        bytes calldata hookData\\n    ) internal returns (bool shouldExecute) {\\n        if (key.hooks.hasPermission(BEFORE_SWAP_FLAG)) {\\n            shouldExecute = self.callHookNoopable(\\n                abi.encodeWithSelector(\\n                    IHooks.beforeSwap.selector,\\n                    msg.sender,\\n                    key,\\n                    params,\\n                    hookData\\n                )\\n            );\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /// @notice calls afterSwap hook if permissioned and validates return value\\n    function afterSwap(\\n        IHooks self,\\n        PoolKey memory key,\\n        IPoolManager.SwapParams memory params,\\n        BalanceDelta delta,\\n        bytes calldata hookData\\n    ) internal {\\n        if (key.hooks.hasPermission(AFTER_SWAP_FLAG)) {\\n            self.callHook(\\n                abi.encodeWithSelector(\\n                    IHooks.afterSwap.selector,\\n                    msg.sender,\\n                    key,\\n                    params,\\n                    delta,\\n                    hookData\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @notice calls beforeDonate hook if permissioned and validates return value\\n    function beforeDonate(\\n        IHooks self,\\n        PoolKey memory key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) internal returns (bool shouldExecute) {\\n        if (key.hooks.hasPermission(BEFORE_DONATE_FLAG)) {\\n            shouldExecute = self.callHookNoopable(\\n                abi.encodeWithSelector(\\n                    IHooks.beforeDonate.selector,\\n                    msg.sender,\\n                    key,\\n                    amount0,\\n                    amount1,\\n                    hookData\\n                )\\n            );\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /// @notice calls afterDonate hook if permissioned and validates return value\\n    function afterDonate(\\n        IHooks self,\\n        PoolKey memory key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) internal {\\n        if (key.hooks.hasPermission(AFTER_DONATE_FLAG)) {\\n            self.callHook(\\n                abi.encodeWithSelector(\\n                    IHooks.afterDonate.selector,\\n                    msg.sender,\\n                    key,\\n                    amount0,\\n                    amount1,\\n                    hookData\\n                )\\n            );\\n        }\\n    }\\n\\n    function hasPermission(\\n        IHooks self,\\n        uint256 flag\\n    ) internal pure returns (bool) {\\n        return uint256(uint160(address(self))) & flag != 0;\\n    }\\n\\n    /// @notice bubble up revert if present. Else throw FailedHookCall\\n    function _revert(bytes memory result) private pure {\\n        if (result.length > 0) {\\n            assembly {\\n                revert(add(0x20, result), mload(result))\\n            }\\n        } else {\\n            revert FailedHookCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc095e692dcaa5e02224e4491cec4d1d7af4d826f5febd334e90091f91767ca06\",\"license\":\"MIT\"},\"contracts/Uniswap/V4-Core/libraries/Locker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\n\\nimport {IHooks} from \\\"../interfaces/IHooks.sol\\\";\\n\\n/// @notice This is a temporary library that allows us to use transient storage (tstore/tload)\\n/// for the lockers array\\n/// TODO: This library can be deleted when we have the transient keyword support in solidity.\\nlibrary Locker {\\n    // The slot holding the locker, transiently, and the lock caller in the next slot\\n    uint256 constant LOCKER_SLOT = uint256(keccak256(\\\"Locker\\\")) - 1;\\n\\n    /// @notice Thrown when trying to set the lock target as address(0)\\n    /// we use locker==address(0) to signal that the pool is not locked\\n    error InvalidLocker();\\n\\n    function setLocker(address locker) internal {\\n        if (locker == address(0)) revert InvalidLocker();\\n        uint256 slot = LOCKER_SLOT;\\n\\n        assembly {\\n            // set the locker\\n            tstore(slot, locker)\\n        }\\n    }\\n\\n    function clearLocker() internal {\\n        uint256 slot = LOCKER_SLOT;\\n        assembly {\\n            tstore(slot, 0)\\n        }\\n    }\\n\\n    function getLocker() internal view returns (address locker) {\\n        uint256 slot = LOCKER_SLOT;\\n        assembly {\\n            locker := tload(slot)\\n        }\\n    }\\n\\n    function isLocked() internal view returns (bool) {\\n        return getLocker() != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x50232e5302de8d5430a7a2f174435705e7aec23acb991897a23598b0a3331e55\",\"license\":\"BUSL-1.1\"},\"contracts/Uniswap/V4-Core/libraries/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\nimport {TickBitmap} from \\\"./TickBitmap.sol\\\";\\nimport {Position} from \\\"./Position.sol\\\";\\nimport {FullMath} from \\\"./FullMath.sol\\\";\\nimport {FixedPoint128} from \\\"./FixedPoint128.sol\\\";\\nimport {TickMath} from \\\"./TickMath.sol\\\";\\nimport {SqrtPriceMath} from \\\"./SqrtPriceMath.sol\\\";\\nimport {SwapMath} from \\\"./SwapMath.sol\\\";\\nimport {BalanceDelta, toBalanceDelta} from \\\"../types/BalanceDelta.sol\\\";\\n\\n// import {PoolNotInitialized} from \\\"../interfaces/IPoolManager.sol\\\";\\n\\nlibrary Pool {\\n    using SafeCast for *;\\n    using TickBitmap for mapping(int16 => uint256);\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n    using Pool for State;\\n\\n    /// @notice Thrown when tickLower is not below tickUpper\\n    /// @param tickLower The invalid tickLower\\n    /// @param tickUpper The invalid tickUpper\\n    error TicksMisordered(int24 tickLower, int24 tickUpper);\\n\\n    /// @notice Thrown when tickLower is less than min tick\\n    /// @param tickLower The invalid tickLower\\n    error TickLowerOutOfBounds(int24 tickLower);\\n\\n    /// @notice Thrown when tickUpper exceeds max tick\\n    /// @param tickUpper The invalid tickUpper\\n    error TickUpperOutOfBounds(int24 tickUpper);\\n\\n    /// @notice For the tick spacing, the tick has too much liquidity\\n    error TickLiquidityOverflow(int24 tick);\\n\\n    /// @notice Thrown when interacting with an uninitialized tick that must be initialized\\n    /// @param tick The uninitialized tick\\n    error TickNotInitialized(int24 tick);\\n\\n    /// @notice Thrown when trying to initialize an already initialized pool\\n    error PoolAlreadyInitialized();\\n\\n    /// @notice Thrown when trying to interact with a non-initialized pool\\n    error PoolNotInitialized1();\\n\\n    /// @notice Thrown when trying to swap amount of 0\\n    error SwapAmountCannotBeZero();\\n\\n    /// @notice Thrown when sqrtPriceLimitX96 on a swap has already exceeded its limit\\n    /// @param sqrtPriceCurrentX96 The invalid, already surpassed sqrtPriceLimitX96\\n    /// @param sqrtPriceLimitX96 The surpassed price limit\\n    error PriceLimitAlreadyExceeded(\\n        uint160 sqrtPriceCurrentX96,\\n        uint160 sqrtPriceLimitX96\\n    );\\n\\n    /// @notice Thrown when sqrtPriceLimitX96 lies outside of valid tick/price range\\n    /// @param sqrtPriceLimitX96 The invalid, out-of-bounds sqrtPriceLimitX96\\n    error PriceLimitOutOfBounds(uint160 sqrtPriceLimitX96);\\n\\n    /// @notice Thrown by donate if there is currently 0 liquidity, since the fees will not go to any liquidity providers\\n    error NoLiquidityToReceiveFees();\\n\\n    struct Slot0 {\\n        // the current price\\n        uint160 sqrtPriceX96;\\n        // the current tick\\n        int24 tick;\\n        // protocol swap fee represented as integer denominator (1/x), taken as a % of the LP swap fee\\n        // upper 8 bits are for 1->0, and the lower 8 are for 0->1\\n        // the minimum permitted denominator is 4 - meaning the maximum protocol fee is 25%\\n        // granularity is increments of 0.38% (100/type(uint8).max)\\n        uint16 protocolFee;\\n        // used for the swap fee, either static at initialize or dynamic via hook\\n        uint24 swapFee;\\n    }\\n\\n    // info stored for each initialized individual tick\\n    struct TickInfo {\\n        // the total position liquidity that references this tick\\n        uint128 liquidityGross;\\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\\n        int128 liquidityNet;\\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n    }\\n\\n    /// @dev The state of a pool\\n    struct State {\\n        Slot0 slot0;\\n        uint256 feeGrowthGlobal0X128;\\n        uint256 feeGrowthGlobal1X128;\\n        uint128 liquidity;\\n        mapping(int24 => TickInfo) ticks;\\n        mapping(int16 => uint256) tickBitmap;\\n        mapping(bytes32 => Position.Info) positions;\\n    }\\n\\n    /// @dev Common checks for valid tick inputs.\\n    function checkTicks(int24 tickLower, int24 tickUpper) private pure {\\n        if (tickLower >= tickUpper)\\n            revert TicksMisordered(tickLower, tickUpper);\\n        if (tickLower < TickMath.MIN_TICK)\\n            revert TickLowerOutOfBounds(tickLower);\\n        if (tickUpper > TickMath.MAX_TICK)\\n            revert TickUpperOutOfBounds(tickUpper);\\n    }\\n\\n    function initialize(\\n        State storage self,\\n        uint160 sqrtPriceX96,\\n        uint16 protocolFee,\\n        uint24 swapFee\\n    ) internal returns (int24 tick) {\\n        if (self.slot0.sqrtPriceX96 != 0) revert PoolAlreadyInitialized();\\n\\n        tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\\n\\n        self.slot0 = Slot0({\\n            sqrtPriceX96: sqrtPriceX96,\\n            tick: tick,\\n            protocolFee: protocolFee,\\n            swapFee: swapFee\\n        });\\n    }\\n\\n    function setProtocolFee(State storage self, uint16 protocolFee) internal {\\n        if (self.isNotInitialized()) revert PoolNotInitialized1();\\n\\n        self.slot0.protocolFee = protocolFee;\\n    }\\n\\n    /// @notice Only dynamic fee pools may update the swap fee.\\n    function setSwapFee(State storage self, uint24 swapFee) internal {\\n        if (self.isNotInitialized()) revert PoolNotInitialized1();\\n        self.slot0.swapFee = swapFee;\\n    }\\n\\n    struct ModifyPositionParams {\\n        // the address that owns the position\\n        address owner;\\n        // the lower and upper tick of the position\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // any change in liquidity\\n        int128 liquidityDelta;\\n        // the spacing between ticks\\n        int24 tickSpacing;\\n    }\\n\\n    struct ModifyPositionState {\\n        bool flippedLower;\\n        uint128 liquidityGrossAfterLower;\\n        bool flippedUpper;\\n        uint128 liquidityGrossAfterUpper;\\n        uint256 feeGrowthInside0X128;\\n        uint256 feeGrowthInside1X128;\\n    }\\n\\n    /// @notice Effect changes to a position in a pool\\n    /// @dev PoolManager checks that the pool is initialized before calling\\n    /// @param params the position details and the change to the position's liquidity to effect\\n    /// @return result the deltas of the token balances of the pool\\n    function modifyPosition(\\n        State storage self,\\n        ModifyPositionParams memory params\\n    ) internal returns (BalanceDelta result) {\\n        checkTicks(params.tickLower, params.tickUpper);\\n\\n        uint256 feesOwed0;\\n        uint256 feesOwed1;\\n        {\\n            ModifyPositionState memory state;\\n\\n            // if we need to update the ticks, do it\\n            if (params.liquidityDelta != 0) {\\n                (\\n                    state.flippedLower,\\n                    state.liquidityGrossAfterLower\\n                ) = updateTick(\\n                    self,\\n                    params.tickLower,\\n                    params.liquidityDelta,\\n                    false\\n                );\\n                (\\n                    state.flippedUpper,\\n                    state.liquidityGrossAfterUpper\\n                ) = updateTick(\\n                    self,\\n                    params.tickUpper,\\n                    params.liquidityDelta,\\n                    true\\n                );\\n\\n                if (params.liquidityDelta > 0) {\\n                    uint128 maxLiquidityPerTick = tickSpacingToMaxLiquidityPerTick(\\n                            params.tickSpacing\\n                        );\\n                    if (state.liquidityGrossAfterLower > maxLiquidityPerTick) {\\n                        revert TickLiquidityOverflow(params.tickLower);\\n                    }\\n                    if (state.liquidityGrossAfterUpper > maxLiquidityPerTick) {\\n                        revert TickLiquidityOverflow(params.tickUpper);\\n                    }\\n                }\\n\\n                if (state.flippedLower) {\\n                    self.tickBitmap.flipTick(\\n                        params.tickLower,\\n                        params.tickSpacing\\n                    );\\n                }\\n                if (state.flippedUpper) {\\n                    self.tickBitmap.flipTick(\\n                        params.tickUpper,\\n                        params.tickSpacing\\n                    );\\n                }\\n            }\\n\\n            (\\n                state.feeGrowthInside0X128,\\n                state.feeGrowthInside1X128\\n            ) = getFeeGrowthInside(self, params.tickLower, params.tickUpper);\\n\\n            (feesOwed0, feesOwed1) = self\\n                .positions\\n                .get(params.owner, params.tickLower, params.tickUpper)\\n                .update(\\n                    params.liquidityDelta,\\n                    state.feeGrowthInside0X128,\\n                    state.feeGrowthInside1X128\\n                );\\n\\n            // clear any tick data that is no longer needed\\n            if (params.liquidityDelta < 0) {\\n                if (state.flippedLower) {\\n                    clearTick(self, params.tickLower);\\n                }\\n                if (state.flippedUpper) {\\n                    clearTick(self, params.tickUpper);\\n                }\\n            }\\n        }\\n\\n        if (params.liquidityDelta != 0) {\\n            if (self.slot0.tick < params.tickLower) {\\n                // current tick is below the passed range; liquidity can only become in range by crossing from left to\\n                // right, when we'll need _more_ currency0 (it's becoming more valuable) so user must provide it\\n                result =\\n                    result +\\n                    toBalanceDelta(\\n                        SqrtPriceMath\\n                            .getAmount0Delta(\\n                                TickMath.getSqrtRatioAtTick(params.tickLower),\\n                                TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                                params.liquidityDelta\\n                            )\\n                            .toInt128(),\\n                        0\\n                    );\\n            } else if (self.slot0.tick < params.tickUpper) {\\n                result =\\n                    result +\\n                    toBalanceDelta(\\n                        SqrtPriceMath\\n                            .getAmount0Delta(\\n                                self.slot0.sqrtPriceX96,\\n                                TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                                params.liquidityDelta\\n                            )\\n                            .toInt128(),\\n                        SqrtPriceMath\\n                            .getAmount1Delta(\\n                                TickMath.getSqrtRatioAtTick(params.tickLower),\\n                                self.slot0.sqrtPriceX96,\\n                                params.liquidityDelta\\n                            )\\n                            .toInt128()\\n                    );\\n\\n                self.liquidity = params.liquidityDelta < 0\\n                    ? self.liquidity - uint128(-params.liquidityDelta)\\n                    : self.liquidity + uint128(params.liquidityDelta);\\n            } else {\\n                // current tick is above the passed range; liquidity can only become in range by crossing from right to\\n                // left, when we'll need _more_ currency1 (it's becoming more valuable) so user must provide it\\n                result =\\n                    result +\\n                    toBalanceDelta(\\n                        0,\\n                        SqrtPriceMath\\n                            .getAmount1Delta(\\n                                TickMath.getSqrtRatioAtTick(params.tickLower),\\n                                TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                                params.liquidityDelta\\n                            )\\n                            .toInt128()\\n                    );\\n            }\\n        }\\n\\n        // Fees earned from LPing are removed from the pool balance.\\n        result =\\n            result -\\n            toBalanceDelta(feesOwed0.toInt128(), feesOwed1.toInt128());\\n    }\\n\\n    struct SwapCache {\\n        // liquidity at the beginning of the swap\\n        uint128 liquidityStart;\\n        // the protocol fee for the input token\\n        uint8 protocolFee;\\n    }\\n\\n    // the top level state of the swap, the results of which are recorded in storage at the end\\n    struct SwapState {\\n        // the amount remaining to be swapped in/out of the input/output asset\\n        int256 amountSpecifiedRemaining;\\n        // the amount already swapped out/in of the output/input asset\\n        int256 amountCalculated;\\n        // current sqrt(price)\\n        uint160 sqrtPriceX96;\\n        // the tick associated with the current price\\n        int24 tick;\\n        // the global fee growth of the input token\\n        uint256 feeGrowthGlobalX128;\\n        // the current liquidity in range\\n        uint128 liquidity;\\n    }\\n\\n    struct StepComputations {\\n        // the price at the beginning of the step\\n        uint160 sqrtPriceStartX96;\\n        // the next tick to swap to from the current tick in the swap direction\\n        int24 tickNext;\\n        // whether tickNext is initialized or not\\n        bool initialized;\\n        // sqrt(price) for the next tick (1/0)\\n        uint160 sqrtPriceNextX96;\\n        // how much is being swapped in in this step\\n        uint256 amountIn;\\n        // how much is being swapped out\\n        uint256 amountOut;\\n        // how much fee is being paid in\\n        uint256 feeAmount;\\n    }\\n\\n    struct SwapParams {\\n        int24 tickSpacing;\\n        bool zeroForOne;\\n        int256 amountSpecified;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Executes a swap against the state, and returns the amount deltas of the pool\\n    /// @dev PoolManager checks that the pool is initialized before calling\\n    function swap(\\n        State storage self,\\n        SwapParams memory params\\n    )\\n        internal\\n        returns (\\n            BalanceDelta result,\\n            uint256 feeForProtocol,\\n            uint24 swapFee,\\n            SwapState memory state\\n        )\\n    {\\n        if (params.amountSpecified == 0) revert SwapAmountCannotBeZero();\\n\\n        Slot0 memory slot0Start = self.slot0;\\n        swapFee = slot0Start.swapFee;\\n        if (params.zeroForOne) {\\n            if (params.sqrtPriceLimitX96 >= slot0Start.sqrtPriceX96) {\\n                revert PriceLimitAlreadyExceeded(\\n                    slot0Start.sqrtPriceX96,\\n                    params.sqrtPriceLimitX96\\n                );\\n            }\\n            if (params.sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\\n                revert PriceLimitOutOfBounds(params.sqrtPriceLimitX96);\\n            }\\n        } else {\\n            if (params.sqrtPriceLimitX96 <= slot0Start.sqrtPriceX96) {\\n                revert PriceLimitAlreadyExceeded(\\n                    slot0Start.sqrtPriceX96,\\n                    params.sqrtPriceLimitX96\\n                );\\n            }\\n            if (params.sqrtPriceLimitX96 >= TickMath.MAX_SQRT_RATIO) {\\n                revert PriceLimitOutOfBounds(params.sqrtPriceLimitX96);\\n            }\\n        }\\n\\n        SwapCache memory cache = SwapCache({\\n            liquidityStart: self.liquidity,\\n            protocolFee: params.zeroForOne\\n                ? uint8(slot0Start.protocolFee % 256)\\n                : uint8(slot0Start.protocolFee >> 8)\\n        });\\n\\n        bool exactInput = params.amountSpecified > 0;\\n\\n        state = SwapState({\\n            amountSpecifiedRemaining: params.amountSpecified,\\n            amountCalculated: 0,\\n            sqrtPriceX96: slot0Start.sqrtPriceX96,\\n            tick: slot0Start.tick,\\n            feeGrowthGlobalX128: params.zeroForOne\\n                ? self.feeGrowthGlobal0X128\\n                : self.feeGrowthGlobal1X128,\\n            liquidity: cache.liquidityStart\\n        });\\n\\n        StepComputations memory step;\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (\\n            state.amountSpecifiedRemaining != 0 &&\\n            state.sqrtPriceX96 != params.sqrtPriceLimitX96\\n        ) {\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized) = self\\n                .tickBitmap\\n                .nextInitializedTickWithinOneWord(\\n                    state.tick,\\n                    params.tickSpacing,\\n                    params.zeroForOne\\n                );\\n\\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n            if (step.tickNext < TickMath.MIN_TICK) {\\n                step.tickNext = TickMath.MIN_TICK;\\n            } else if (step.tickNext > TickMath.MAX_TICK) {\\n                step.tickNext = TickMath.MAX_TICK;\\n            }\\n\\n            // get the price for the next tick\\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\\n\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (\\n                state.sqrtPriceX96,\\n                step.amountIn,\\n                step.amountOut,\\n                step.feeAmount\\n            ) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                (\\n                    params.zeroForOne\\n                        ? step.sqrtPriceNextX96 < params.sqrtPriceLimitX96\\n                        : step.sqrtPriceNextX96 > params.sqrtPriceLimitX96\\n                )\\n                    ? params.sqrtPriceLimitX96\\n                    : step.sqrtPriceNextX96,\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                swapFee\\n            );\\n\\n            if (exactInput) {\\n                // safe because we test that amountSpecified > amountIn + feeAmount in SwapMath\\n                unchecked {\\n                    state.amountSpecifiedRemaining -= (step.amountIn +\\n                        step.feeAmount).toInt256();\\n                }\\n                state.amountCalculated =\\n                    state.amountCalculated -\\n                    step.amountOut.toInt256();\\n            } else {\\n                unchecked {\\n                    state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                }\\n                state.amountCalculated =\\n                    state.amountCalculated +\\n                    (step.amountIn + step.feeAmount).toInt256();\\n            }\\n\\n            // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\\n            if (cache.protocolFee > 0) {\\n                // A: calculate the amount of the fee that should go to the protocol\\n                uint256 delta = step.feeAmount / cache.protocolFee;\\n                // A: subtract it from the regular fee and add it to the protocol fee\\n                unchecked {\\n                    step.feeAmount -= delta;\\n                    feeForProtocol += delta;\\n                }\\n            }\\n\\n            // update global fee tracker\\n            if (state.liquidity > 0) {\\n                unchecked {\\n                    state.feeGrowthGlobalX128 += FullMath.mulDiv(\\n                        step.feeAmount,\\n                        FixedPoint128.Q128,\\n                        state.liquidity\\n                    );\\n                }\\n            }\\n\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    int128 liquidityNet = Pool.crossTick(\\n                        self,\\n                        step.tickNext,\\n                        (\\n                            params.zeroForOne\\n                                ? state.feeGrowthGlobalX128\\n                                : self.feeGrowthGlobal0X128\\n                        ),\\n                        (\\n                            params.zeroForOne\\n                                ? self.feeGrowthGlobal1X128\\n                                : state.feeGrowthGlobalX128\\n                        )\\n                    );\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    unchecked {\\n                        if (params.zeroForOne) liquidityNet = -liquidityNet;\\n                    }\\n\\n                    state.liquidity = liquidityNet < 0\\n                        ? state.liquidity - uint128(-liquidityNet)\\n                        : state.liquidity + uint128(liquidityNet);\\n                }\\n\\n                unchecked {\\n                    state.tick = params.zeroForOne\\n                        ? step.tickNext - 1\\n                        : step.tickNext;\\n                }\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        (self.slot0.sqrtPriceX96, self.slot0.tick) = (\\n            state.sqrtPriceX96,\\n            state.tick\\n        );\\n\\n        // update liquidity if it changed\\n        if (cache.liquidityStart != state.liquidity)\\n            self.liquidity = state.liquidity;\\n\\n        // update fee growth global\\n        if (params.zeroForOne) {\\n            self.feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;\\n        } else {\\n            self.feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;\\n        }\\n\\n        unchecked {\\n            if (params.zeroForOne == exactInput) {\\n                result = toBalanceDelta(\\n                    (params.amountSpecified - state.amountSpecifiedRemaining)\\n                        .toInt128(),\\n                    state.amountCalculated.toInt128()\\n                );\\n            } else {\\n                result = toBalanceDelta(\\n                    state.amountCalculated.toInt128(),\\n                    (params.amountSpecified - state.amountSpecifiedRemaining)\\n                        .toInt128()\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Donates the given amount of currency0 and currency1 to the pool\\n    function donate(\\n        State storage state,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal returns (BalanceDelta delta) {\\n        if (state.liquidity == 0) revert NoLiquidityToReceiveFees();\\n        delta = toBalanceDelta(amount0.toInt128(), amount1.toInt128());\\n        unchecked {\\n            if (amount0 > 0) {\\n                state.feeGrowthGlobal0X128 += FullMath.mulDiv(\\n                    amount0,\\n                    FixedPoint128.Q128,\\n                    state.liquidity\\n                );\\n            }\\n            if (amount1 > 0) {\\n                state.feeGrowthGlobal1X128 += FullMath.mulDiv(\\n                    amount1,\\n                    FixedPoint128.Q128,\\n                    state.liquidity\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Retrieves fee growth data\\n    /// @param self The Pool state struct\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\n    /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\n    function getFeeGrowthInside(\\n        State storage self,\\n        int24 tickLower,\\n        int24 tickUpper\\n    )\\n        internal\\n        view\\n        returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128)\\n    {\\n        TickInfo storage lower = self.ticks[tickLower];\\n        TickInfo storage upper = self.ticks[tickUpper];\\n        int24 tickCurrent = self.slot0.tick;\\n\\n        unchecked {\\n            if (tickCurrent < tickLower) {\\n                feeGrowthInside0X128 =\\n                    lower.feeGrowthOutside0X128 -\\n                    upper.feeGrowthOutside0X128;\\n                feeGrowthInside1X128 =\\n                    lower.feeGrowthOutside1X128 -\\n                    upper.feeGrowthOutside1X128;\\n            } else if (tickCurrent >= tickUpper) {\\n                feeGrowthInside0X128 =\\n                    upper.feeGrowthOutside0X128 -\\n                    lower.feeGrowthOutside0X128;\\n                feeGrowthInside1X128 =\\n                    upper.feeGrowthOutside1X128 -\\n                    lower.feeGrowthOutside1X128;\\n            } else {\\n                feeGrowthInside0X128 =\\n                    self.feeGrowthGlobal0X128 -\\n                    lower.feeGrowthOutside0X128 -\\n                    upper.feeGrowthOutside0X128;\\n                feeGrowthInside1X128 =\\n                    self.feeGrowthGlobal1X128 -\\n                    lower.feeGrowthOutside1X128 -\\n                    upper.feeGrowthOutside1X128;\\n            }\\n        }\\n    }\\n\\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tick The tick that will be updated\\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\\n    /// @return liquidityGrossAfter The total amount of  liquidity for all positions that references the tick after the update\\n    function updateTick(\\n        State storage self,\\n        int24 tick,\\n        int128 liquidityDelta,\\n        bool upper\\n    ) internal returns (bool flipped, uint128 liquidityGrossAfter) {\\n        TickInfo storage info = self.ticks[tick];\\n\\n        uint128 liquidityGrossBefore;\\n        int128 liquidityNetBefore;\\n        assembly {\\n            // load first slot of info which contains liquidityGross and liquidityNet packed\\n            // where the top 128 bits are liquidityNet and the bottom 128 bits are liquidityGross\\n            let liquidity := sload(info.slot)\\n            // slice off top 128 bits of liquidity (liquidityNet) to get just liquidityGross\\n            liquidityGrossBefore := shr(128, shl(128, liquidity))\\n            // shift right 128 bits to get just liquidityNet\\n            liquidityNetBefore := shr(128, liquidity)\\n        }\\n\\n        liquidityGrossAfter = liquidityDelta < 0\\n            ? liquidityGrossBefore - uint128(-liquidityDelta)\\n            : liquidityGrossBefore + uint128(liquidityDelta);\\n\\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\\n\\n        if (liquidityGrossBefore == 0) {\\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\\n            if (tick <= self.slot0.tick) {\\n                info.feeGrowthOutside0X128 = self.feeGrowthGlobal0X128;\\n                info.feeGrowthOutside1X128 = self.feeGrowthGlobal1X128;\\n            }\\n        }\\n\\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\\n        int128 liquidityNet = upper\\n            ? liquidityNetBefore - liquidityDelta\\n            : liquidityNetBefore + liquidityDelta;\\n        assembly {\\n            // liquidityGrossAfter and liquidityNet are packed in the first slot of `info`\\n            // So we can store them with a single sstore by packing them ourselves first\\n            sstore(\\n                info.slot,\\n                // bitwise OR to pack liquidityGrossAfter and liquidityNet\\n                or(\\n                    // liquidityGross is in the low bits, upper bits are already 0\\n                    liquidityGrossAfter,\\n                    // shift liquidityNet to take the upper bits and lower bits get filled with 0\\n                    shl(128, liquidityNet)\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @notice Derives max liquidity per tick from given tick spacing\\n    /// @dev Executed within the pool constructor\\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @return The max liquidity per tick\\n    function tickSpacingToMaxLiquidityPerTick(\\n        int24 tickSpacing\\n    ) internal pure returns (uint128) {\\n        unchecked {\\n            return\\n                uint128(\\n                    (type(uint128).max * uint256(int256(tickSpacing))) /\\n                        uint256(int256(TickMath.MAX_TICK * 2 + tickSpacing))\\n                );\\n        }\\n    }\\n\\n    function isNotInitialized(State storage self) internal view returns (bool) {\\n        return self.slot0.sqrtPriceX96 == 0;\\n    }\\n\\n    /// @notice Clears tick data\\n    /// @param self The mapping containing all initialized tick information for initialized ticks\\n    /// @param tick The tick that will be cleared\\n    function clearTick(State storage self, int24 tick) internal {\\n        delete self.ticks[tick];\\n    }\\n\\n    /// @notice Transitions to next tick as needed by price movement\\n    /// @param self The Pool state struct\\n    /// @param tick The destination tick of the transition\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\\n    function crossTick(\\n        State storage self,\\n        int24 tick,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128\\n    ) internal returns (int128 liquidityNet) {\\n        unchecked {\\n            TickInfo storage info = self.ticks[tick];\\n            info.feeGrowthOutside0X128 =\\n                feeGrowthGlobal0X128 -\\n                info.feeGrowthOutside0X128;\\n            info.feeGrowthOutside1X128 =\\n                feeGrowthGlobal1X128 -\\n                info.feeGrowthOutside1X128;\\n            liquidityNet = info.liquidityNet;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x71dca8fb335ad2833b4a92c89168063d00deedb5490f68c9f8e4ac454c2502d6\",\"license\":\"BUSL-1.1\"},\"contracts/Uniswap/V4-Core/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\n\\nimport {FullMath} from \\\"./FullMath.sol\\\";\\nimport {FixedPoint128} from \\\"./FixedPoint128.sol\\\";\\n\\n/// @title Position\\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\\n/// @dev Positions store additional state for tracking fees owed to the position\\nlibrary Position {\\n    /// @notice Cannot update a position with no liquidity\\n    error CannotUpdateEmptyPosition();\\n\\n    // info stored for each user's position\\n    struct Info {\\n        // the amount of liquidity owned by this position\\n        uint128 liquidity;\\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n    }\\n\\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\\n    /// @param self The mapping containing all user positions\\n    /// @param owner The address of the position owner\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @return position The position info struct of the given owners' position\\n    function get(mapping(bytes32 => Info) storage self, address owner, int24 tickLower, int24 tickUpper)\\n        internal\\n        view\\n        returns (Position.Info storage position)\\n    {\\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\\n    }\\n\\n    /// @notice Credits accumulated fees to a user's position\\n    /// @param self The individual position to update\\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\\n    /// @param feeGrowthInside0X128 The all-time fee growth in currency0, per unit of liquidity, inside the position's tick boundaries\\n    /// @param feeGrowthInside1X128 The all-time fee growth in currency1, per unit of liquidity, inside the position's tick boundaries\\n    /// @return feesOwed0 The amount of currency0 owed to the position owner\\n    /// @return feesOwed1 The amount of currency1 owed to the position owner\\n    function update(\\n        Info storage self,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthInside0X128,\\n        uint256 feeGrowthInside1X128\\n    ) internal returns (uint256 feesOwed0, uint256 feesOwed1) {\\n        Info memory _self = self;\\n\\n        uint128 liquidityNext;\\n        if (liquidityDelta == 0) {\\n            if (_self.liquidity == 0) revert CannotUpdateEmptyPosition(); // disallow pokes for 0 liquidity positions\\n            liquidityNext = _self.liquidity;\\n        } else {\\n            liquidityNext = liquidityDelta < 0\\n                ? _self.liquidity - uint128(-liquidityDelta)\\n                : _self.liquidity + uint128(liquidityDelta);\\n        }\\n\\n        // calculate accumulated fees. overflow in the subtraction of fee growth is expected\\n        unchecked {\\n            feesOwed0 = FullMath.mulDiv(\\n                feeGrowthInside0X128 - _self.feeGrowthInside0LastX128, _self.liquidity, FixedPoint128.Q128\\n            );\\n            feesOwed1 = FullMath.mulDiv(\\n                feeGrowthInside1X128 - _self.feeGrowthInside1LastX128, _self.liquidity, FixedPoint128.Q128\\n            );\\n        }\\n\\n        // update the position\\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\\n    }\\n}\\n\",\"keccak256\":\"0x1319e4c172e31427c3b3521dd3c9c9c3949da22e25c9919ae57c47a8c9328e43\",\"license\":\"BUSL-1.1\"},\"contracts/Uniswap/V4-Core/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    error SafeCastOverflow();\\n\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        z = uint160(y);\\n        if (z != y) revert SafeCastOverflow();\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        z = int128(y);\\n        if (z != y) revert SafeCastOverflow();\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        if (y > uint256(type(int256).max)) revert SafeCastOverflow();\\n        z = int256(y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int128, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(uint256 y) internal pure returns (int128 z) {\\n        if (y > uint128(type(int128).max)) revert SafeCastOverflow();\\n        z = int128(int256(y));\\n    }\\n}\\n\",\"keccak256\":\"0x197985a64d2ccf38a5e6a80cf70dc345594cc7296a2364b7447e553966ed89dc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/V4-Core/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\nimport {FullMath} from \\\"./FullMath.sol\\\";\\nimport {UnsafeMath} from \\\"./UnsafeMath.sol\\\";\\nimport {FixedPoint96} from \\\"./FixedPoint96.sol\\\";\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using SafeCast for uint256;\\n\\n    error InvalidPriceOrLiquidity();\\n    error InvalidPrice();\\n    error NotEnoughLiquidity();\\n    error PriceOverflow();\\n\\n    /// @notice Gets the next sqrt price given a delta of currency0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the currency0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of currency0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of currency0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(uint160 sqrtPX96, uint128 liquidity, uint256 amount, bool add)\\n        internal\\n        pure\\n        returns (uint160)\\n    {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            unchecked {\\n                uint256 product = amount * sqrtPX96;\\n                if (product / amount == sqrtPX96) {\\n                    uint256 denominator = numerator1 + product;\\n                    if (denominator >= numerator1) {\\n                        // always fits in 160 bits\\n                        return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n                    }\\n                }\\n            }\\n            // denominator is checked for overflow\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96) + amount));\\n        } else {\\n            unchecked {\\n                uint256 product = amount * sqrtPX96;\\n                // if the product overflows, we know the denominator underflows\\n                // in addition, we must check that the denominator does not underflow\\n                if (product / amount != sqrtPX96 || numerator1 <= product) revert PriceOverflow();\\n                uint256 denominator = numerator1 - product;\\n                return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of currency1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the currency1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of currency1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of currency1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(uint160 sqrtPX96, uint128 liquidity, uint256 amount, bool add)\\n        internal\\n        pure\\n        returns (uint160)\\n    {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n            );\\n\\n            return (uint256(sqrtPX96) + quotient).toUint160();\\n        } else {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                    : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n            );\\n\\n            if (sqrtPX96 <= quotient) revert NotEnoughLiquidity();\\n            // always fits 160 bits\\n            unchecked {\\n                return uint160(sqrtPX96 - quotient);\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of currency0 or currency1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of currency0, or currency1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is currency0 or currency1\\n    /// @return sqrtQX96 The price after adding the input amount to currency0 or currency1\\n    function getNextSqrtPriceFromInput(uint160 sqrtPX96, uint128 liquidity, uint256 amountIn, bool zeroForOne)\\n        internal\\n        pure\\n        returns (uint160 sqrtQX96)\\n    {\\n        if (sqrtPX96 == 0 || liquidity == 0) revert InvalidPriceOrLiquidity();\\n\\n        // round to make sure that we don't pass the target price\\n        return zeroForOne\\n            ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n            : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of currency0 or currency1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of currency0, or currency1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is currency0 or currency1\\n    /// @return sqrtQX96 The price after removing the output amount of currency0 or currency1\\n    function getNextSqrtPriceFromOutput(uint160 sqrtPX96, uint128 liquidity, uint256 amountOut, bool zeroForOne)\\n        internal\\n        pure\\n        returns (uint160 sqrtQX96)\\n    {\\n        if (sqrtPX96 == 0 || liquidity == 0) revert InvalidPriceOrLiquidity();\\n\\n        // round to make sure that we pass the target price\\n        return zeroForOne\\n            ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n            : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of currency0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity, bool roundUp)\\n        internal\\n        pure\\n        returns (uint256 amount0)\\n    {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n            uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n            if (sqrtRatioAX96 == 0) revert InvalidPrice();\\n\\n            return roundUp\\n                ? UnsafeMath.divRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96), sqrtRatioAX96)\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n        }\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of currency1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity, bool roundUp)\\n        internal\\n        pure\\n        returns (uint256 amount1)\\n    {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return roundUp\\n            ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n            : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed currency0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of currency0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, int128 liquidity)\\n        internal\\n        pure\\n        returns (int256 amount0)\\n    {\\n        unchecked {\\n            return liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n        }\\n    }\\n\\n    /// @notice Helper that gets signed currency1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of currency1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, int128 liquidity)\\n        internal\\n        pure\\n        returns (int256 amount1)\\n    {\\n        unchecked {\\n            return liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe54bb39a96f98df7b8d36fade6b95bc866e138594b146ef0d4cee4e542170058\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/V4-Core/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\nimport {FullMath} from \\\"./FullMath.sol\\\";\\nimport {SqrtPriceMath} from \\\"./SqrtPriceMath.sol\\\";\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either currency0 or currency1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either currency0 or currency1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    ) internal pure returns (uint160 sqrtRatioNextX96, uint256 amountIn, uint256 amountOut, uint256 feeAmount) {\\n        unchecked {\\n            bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n            bool exactIn = amountRemaining >= 0;\\n\\n            if (exactIn) {\\n                uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n                amountIn = zeroForOne\\n                    ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n                if (amountRemainingLessFee >= amountIn) {\\n                    sqrtRatioNextX96 = sqrtRatioTargetX96;\\n                } else {\\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                        sqrtRatioCurrentX96, liquidity, amountRemainingLessFee, zeroForOne\\n                    );\\n                }\\n            } else {\\n                amountOut = zeroForOne\\n                    ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n                if (uint256(-amountRemaining) >= amountOut) {\\n                    sqrtRatioNextX96 = sqrtRatioTargetX96;\\n                } else {\\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                        sqrtRatioCurrentX96, liquidity, uint256(-amountRemaining), zeroForOne\\n                    );\\n                }\\n            }\\n\\n            bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n            // get the input/output amounts\\n            if (zeroForOne) {\\n                amountIn = max && exactIn\\n                    ? amountIn\\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n                amountOut = max && !exactIn\\n                    ? amountOut\\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n            } else {\\n                amountIn = max && exactIn\\n                    ? amountIn\\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n                amountOut = max && !exactIn\\n                    ? amountOut\\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n            }\\n\\n            // cap the output amount to not exceed the remaining output amount\\n            if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n                amountOut = uint256(-amountRemaining);\\n            }\\n\\n            if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n                // we didn't reach the target, so take the remainder of the maximum input as fee\\n                feeAmount = uint256(amountRemaining) - amountIn;\\n            } else {\\n                feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac5b75b36ff928e88cbec828bdc9db03e681cc3b337d5d7f6be9fd617b3fef7f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/V4-Core/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Thrown when the tick is not enumerated by the tick spacing\\n    /// @param tick the invalid tick\\n    /// @param tickSpacing The tick spacing of the pool\\n    error TickMisaligned(int24 tick, int24 tickSpacing);\\n\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) internal pure returns (int16 wordPos, uint8 bitPos) {\\n        unchecked {\\n            wordPos = int16(tick >> 8);\\n            bitPos = uint8(int8(tick % 256));\\n        }\\n    }\\n\\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\\n    /// @param self The mapping in which to flip the tick\\n    /// @param tick The tick to flip\\n    /// @param tickSpacing The spacing between usable ticks\\n    function flipTick(mapping(int16 => uint256) storage self, int24 tick, int24 tickSpacing) internal {\\n        unchecked {\\n            if (tick % tickSpacing != 0) revert TickMisaligned(tick, tickSpacing); // ensure that the tick is spaced\\n            (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\\n            uint256 mask = 1 << bitPos;\\n            self[wordPos] ^= mask;\\n        }\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param self The mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        unchecked {\\n            int24 compressed = tick / tickSpacing;\\n            if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n            if (lte) {\\n                (int16 wordPos, uint8 bitPos) = position(compressed);\\n                // all the 1s at or to the right of the current bitPos\\n                uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n                uint256 masked = self[wordPos] & mask;\\n\\n                // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n                initialized = masked != 0;\\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n                next = initialized\\n                    ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\\n                    : (compressed - int24(uint24(bitPos))) * tickSpacing;\\n            } else {\\n                // start from the word of the next tick, since the current tick state doesn't matter\\n                (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n                // all the 1s at or to the left of the bitPos\\n                uint256 mask = ~((1 << bitPos) - 1);\\n                uint256 masked = self[wordPos] & mask;\\n\\n                // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n                initialized = masked != 0;\\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n                next = initialized\\n                    ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\\n                    : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9998b760bc3d948912bf43d7c556e2ccff16ed800b51fd59e2bb179517ad909d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/V4-Core/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @notice Thrown when the tick passed to #getSqrtRatioAtTick is not between MIN_TICK and MAX_TICK\\n    error InvalidTick();\\n    /// @notice Thrown when the ratio passed to #getTickAtSqrtRatio does not correspond to a price between MIN_TICK and MAX_TICK\\n    error InvalidSqrtRatio();\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum tick spacing value drawn from the range of type int16 that is greater than 0, i.e. min from the range [1, 32767]\\n    int24 internal constant MIN_TICK_SPACING = 1;\\n    /// @dev The maximum tick spacing value drawn from the range of type int16, i.e. max from the range [1, 32767]\\n    int24 internal constant MAX_TICK_SPACING = type(int16).max;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Given a tickSpacing, compute the maximum usable tick\\n    function maxUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MAX_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Given a tickSpacing, compute the minimum usable tick\\n    function minUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MIN_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (currency1/currency0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            if (absTick > uint256(int256(MAX_TICK))) revert InvalidTick();\\n\\n            uint256 ratio =\\n                absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // second inequality must be < because the price can never reach the price at the max tick\\n            if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert InvalidSqrtRatio();\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7e49d8f58765e4d586f943b782f3b11b5330864ffc273494420f268dc3b34a8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/V4-Core/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            assembly {\\n                z := add(div(x, y), gt(mod(x, y), 0))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a8cb75af05f8557b698b089a0ab19e24279fffb7e87cddf5794404c7eaf1c69\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/V4-Core/types/BalanceDelta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ntype BalanceDelta is int256;\\n\\nusing {add as +, sub as -, eq as ==} for BalanceDelta global;\\nusing BalanceDeltaLibrary for BalanceDelta global;\\n\\nfunction toBalanceDelta(int128 _amount0, int128 _amount1) pure returns (BalanceDelta balanceDelta) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        balanceDelta :=\\n            or(shl(128, _amount0), and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff, _amount1))\\n    }\\n}\\n\\nfunction add(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {\\n    return toBalanceDelta(a.amount0() + b.amount0(), a.amount1() + b.amount1());\\n}\\n\\nfunction sub(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {\\n    return toBalanceDelta(a.amount0() - b.amount0(), a.amount1() - b.amount1());\\n}\\n\\nfunction eq(BalanceDelta a, BalanceDelta b) pure returns (bool) {\\n    return a.amount0() == b.amount0() && a.amount1() == b.amount1();\\n}\\n\\nlibrary BalanceDeltaLibrary {\\n    // Sentinel return value used to signify that a NoOp occurred.\\n    BalanceDelta public constant MAXIMUM_DELTA = BalanceDelta.wrap(int256(type(uint256).max));\\n\\n    function amount0(BalanceDelta balanceDelta) internal pure returns (int128 _amount0) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            _amount0 := shr(128, balanceDelta)\\n        }\\n    }\\n\\n    function amount1(BalanceDelta balanceDelta) internal pure returns (int128 _amount1) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            _amount1 := balanceDelta\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb348472d6a9050f8e162173712911896882939a0cd7316db386ced5182716845\",\"license\":\"MIT\"},\"contracts/Uniswap/V4-Core/types/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Minimal} from \\\"../interfaces/external/IERC20Minimal.sol\\\";\\n\\ntype Currency is address;\\n\\nusing {greaterThan as >, lessThan as <, greaterThanOrEqualTo as >=, equals as ==} for Currency global;\\n\\nfunction equals(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) == Currency.unwrap(other);\\n}\\n\\nfunction greaterThan(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) > Currency.unwrap(other);\\n}\\n\\nfunction lessThan(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) < Currency.unwrap(other);\\n}\\n\\nfunction greaterThanOrEqualTo(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) >= Currency.unwrap(other);\\n}\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n        bool success;\\n        if (currency.isNative()) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            assembly {\\n                // We'll write our calldata to this slot below, but restore it later.\\n                let memPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(0, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(4, to) // Append the \\\"to\\\" argument.\\n                mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                        // Counterintuitively, this call() must be positioned after the or() in the\\n                        // surrounding and() because and() evaluates its arguments from right to left.\\n                        call(gas(), currency, 0, 0, 68, 0, 32)\\n                    )\\n\\n                mstore(0x60, 0) // Restore the zero slot to zero.\\n                mstore(0x40, memPointer) // Restore the memPointer.\\n            }\\n\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20Minimal(Currency.unwrap(currency)).balanceOf(address(this));\\n        }\\n    }\\n\\n    function balanceOf(Currency currency, address owner) internal view returns (uint256) {\\n        if (currency.isNative()) {\\n            return owner.balance;\\n        } else {\\n            return IERC20Minimal(Currency.unwrap(currency)).balanceOf(owner);\\n        }\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0xb1395e2817b604745bf6cd41821aafeaaa252caafe45133e54f02d6f6be13d2b\",\"license\":\"MIT\"},\"contracts/Uniswap/V4-Core/types/PoolId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {PoolKey} from \\\"./PoolKey.sol\\\";\\n\\ntype PoolId is bytes32;\\n\\n/// @notice Library for computing the ID of a pool\\nlibrary PoolIdLibrary {\\n    function toId(PoolKey memory poolKey) internal pure returns (PoolId) {\\n        return PoolId.wrap(keccak256(abi.encode(poolKey)));\\n    }\\n}\\n\",\"keccak256\":\"0x2928a23cdf4c3dd05fafd3094020723954150901c6935a40fbb8e3cbc1e0ebe3\",\"license\":\"MIT\"},\"contracts/Uniswap/V4-Core/types/PoolKey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {Currency} from \\\"./Currency.sol\\\";\\nimport {IHooks} from \\\"../interfaces/IHooks.sol\\\";\\n\\n/// @notice Returns the key for identifying a pool\\nstruct PoolKey {\\n    /// @notice The lower currency of the pool, sorted numerically\\n    Currency currency0;\\n    /// @notice The higher currency of the pool, sorted numerically\\n    Currency currency1;\\n    /// @notice The pool swap fee, capped at 1_000_000. The upper 4 bits determine if the hook sets any fees.\\n    uint24 fee;\\n    /// @notice Ticks that involve positions must be a multiple of tick spacing\\n    int24 tickSpacing;\\n    /// @notice The hooks of the pool\\n    IHooks hooks;\\n}\\n\",\"keccak256\":\"0xef7421713157a514d757863e99c2d094a6fac1dcbae602ac0eb47eda2d651a6d\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801562000010575f80fd5b5060043610620001d0575f3560e01c806303528f3414620001d4578063183bba4114620001f65780631a3c79fd146200020f5780632fdd80891462000231578063321d9807146200025357806332665ffb146200025f578063346a16c4146200027657806335dde55d146200028d578063397f795214620002c35780633c4f5a6614620002dc5780633c5c44d614620002e65780633d51402c14620002fd5780633f831810146200031657806342619f66146200032d57806344cc80441462000337578063476e6172146200034e5780634875ea5514620003585780634e303c60146200036f57806373d6889a14620003865780637b83b50b146200039d578063a15af4bf14620003a7578063a77d2f2c14620003b1578063a910f259146200042c578063ac8653e81462000443578063be3e24651462000468578063c0823f4c1462000497578063c09ca07a14620004ae578063d49e715c14620004b8578063d4f77b1c14620004cf578063d65ab5f214620004d9578063dc4c90d314620004e3578063e16c7673146200050b578063eb81e0981462000522578063f81fff90146200052c578063fb4d50de1462000554578063fc7276581462000576575b5f80fd5b620001de62000580565b604051620001ed919062003fae565b60405180910390f35b62000200620005c2565b604051908152602001620001ed565b620002006200022036600462003fd7565b60076020525f908152604090205481565b620002006200024236600462003fd7565b600e6020525f908152604090205481565b6200025d620005d3565b005b620001de6200027036600462003ff5565b620007a3565b62000200620002873660046200400d565b62000888565b620002b26200029e36600462003fd7565b60066020525f908152604090205460ff1681565b6040519015158152602001620001ed565b620002cd62000bfa565b604051620001ed91906200403e565b620002cd62000e1b565b62000200620002f736600462003fd7565b62000eae565b6200030762000f26565b604051620001ed9190620040dd565b620002006200032736600462003fd7565b62001004565b6200020060025481565b6200025d6200034836600462003fd7565b62001057565b620001de6200141c565b6200025d6200036936600462003fd7565b6200145b565b6200025d620003803660046200418a565b6200153b565b62000200620003973660046200400d565b620015e3565b6200020062001871565b620002006200191d565b620003f6620003c236600462003ff5565b60056020525f908152604090208054600282015460038301546007909301546001600160a01b039283169391929091169084565b604051620001ed94939291906001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6200025d6200043d366004620042aa565b62001956565b620002b26200045436600462003fd7565b600f6020525f908152604090205460ff1681565b6200047f6200047936600462003fd7565b62001a8e565b604080519215158352602083019190915201620001ed565b6200025d620004a836600462003fd7565b62001bd2565b6200020062001c39565b620001de620004c936600462003fd7565b62001c5b565b6200025d62001d5d565b6200025d62001f61565b620001de7f000000000000000000000000000000000000000000000000000000000000000081565b6200025d6200051c366004620042e5565b620020ef565b620002cd620022c5565b620001de7f000000000000000000000000000000000000000000000000000000000000000081565b620002006200056536600462003fd7565b60046020525f908152604090205481565b6200020062002387565b5f6003545f036200059057505f90565b5f6001600354620005a291906200431f565b5f908152600560205260409020600301546001600160a01b031692915050565b5f620005ce3362001004565b905090565b5f60035411620006005760405162461bcd60e51b8152600401620005f79062004335565b60405180910390fd5b335f818152600b6020908152604080832054808452600590925290912054909162000635916001600160a01b031690620023ee565b5f818152600560205260409020546001600160a01b031633146200066d5760405162461bcd60e51b8152600401620005f7906200435e565b335f9081526006602052604090205460ff166200069e5760405162461bcd60e51b8152600401620005f7906200438e565b335f818152600660205260408120805460ff19169055908190620006c29062001a8e565b335f908152600f6020526040902054919350915060ff161562000703578115620006fd57335f908152600f60205260409020805460ff191690555b505f9050805b6200070f818362002437565b81156200076f57335f908152600660209081526040808320805460ff19166001179055600790915281208054916200074783620043b8565b9091555050335f90815260076020526040902054600310156200076f576200076f3362001bd2565b6200077c83338362002481565b335f9081526006602052604090205460ff166200079e576200079e8362002b76565b505050565b5f80620007af620022c5565b90505f5b81518110156200087f57818181518110620007d257620007d2620043d3565b60200260200101516001600160a01b031663a61b8c0b856040518263ffffffff1660e01b81526004016200080891815260200190565b602060405180830381865afa15801562000824573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200084a9190620043e7565b156200087657818181518110620008655762000865620043d3565b602002602001015192505050919050565b600101620007b3565b505f9392505050565b335f908152600b60209081526040808320546001600160a01b03858116808652600d8552838620845160a08101865281548416815260018201548085168289015262ffffff600160a01b82041682880152600160b81b9004600290810b60608301529091015483166080820152838752600590955292852060030154919392859273fffd8963efd1fc6a506488495d951d5263988d2692161115620009335750600190506401000276a45b604080516060810182528315158152602081018990526001600160a01b0383169181019190915287906200096a8833308562002cd0565b62000997887f00000000000000000000000000000000000000000000000000000000000000008b62002d3d565b5f806001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d1da87a08885620009d742606462004405565b336040518563ffffffff1660e01b8152600401620009f994939291906200445e565b60408051808303815f875af115801562000a15573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000a3b9190620044af565b915091505f8083121562000a595762000a56835f19620044d2565b90505b5f82121562000a725762000a6f825f19620044d2565b90505b5f62000a7e3362001004565b5f8b81526005602090815260408083206001018054825181850281018501909352808352949550929390929183018282801562000ae357602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831162000ac4575b5050505f858152600860205260408120805460ff1916905592935050505b815181101562000bc1575f8e6001600160a01b03166370a0823184848151811062000b305762000b30620043d3565b60200260200101516040518263ffffffff1660e01b815260040162000b56919062003fae565b602060405180830381865afa15801562000b72573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000b98919062004507565b111562000bb8575f838152600860205260409020805460ff191660011790555b60010162000b01565b505f8b81526005602052604090206003015462000be9906001600160a01b0316338562002e49565b505050505050505050505092915050565b60605f62000c07620022c5565b90505f805b825181101562000cc3575f83828151811062000c2c5762000c2c620043d3565b60200260200101516001600160a01b03166370a08231336040518263ffffffff1660e01b815260040162000c61919062003fae565b602060405180830381865afa15801562000c7d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000ca3919062004507565b111562000cba578162000cb681620043b8565b9250505b60010162000c0c565b505f816001600160401b0381111562000ce05762000ce062004143565b60405190808252806020026020018201604052801562000d0a578160200160208202803683370190505b5090505f805b845181101562000e11575f85828151811062000d305762000d30620043d3565b60200260200101516001600160a01b03166370a08231336040518263ffffffff1660e01b815260040162000d65919062003fae565b602060405180830381865afa15801562000d81573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000da7919062004507565b111562000e085784818151811062000dc35762000dc3620043d3565b602002602001015183838151811062000de05762000de0620043d3565b6001600160a01b03909216602092830291909101909101528162000e0481620043b8565b9250505b60010162000d10565b5090949350505050565b60606003545f0362000e2d5750606090565b5f600160035462000e3f91906200431f565b5f81815260056020908152604091829020600101805483518184028101840190945280845293945091929083018282801562000ea357602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831162000e84575b505050505091505090565b6040516370a0823160e01b81525f906001600160a01b038316906370a082319062000ede90339060040162003fae565b602060405180830381865afa15801562000efa573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000f20919062004507565b92915050565b6060600a805480602002602001604051908101604052809291908181526020015f905b8282101562000ffb578382905f5260205f2001805462000f69906200451f565b80601f016020809104026020016040519081016040528092919081815260200182805462000f97906200451f565b801562000fe65780601f1062000fbc5761010080835404028352916020019162000fe6565b820191905f5260205f20905b81548152906001019060200180831162000fc857829003601f168201915b50505050508152602001906001019062000f49565b50505050905090565b5f6003545f036200101657505f919050565b5f60016003546200102891906200431f565b5f9081526005602090815260408083206001600160a01b03909616835260049095019052929092205492915050565b6001600160a01b0381165f908152600b6020908152604080832054808452600590925282206002015490915b5f83815260056020526040902060010154811015620010f9575f83815260056020526040902060010180546001600160a01b038616919083908110620010cd57620010cd620043d3565b5f918252602090912001546001600160a01b031603620010f057809150620010f9565b60010162001083565b505f8281526005602052604090206002015481106200114e5760405162461bcd60e51b815260206004820152601060248201526f141b185e595c881b9bdd08199bdd5b9960821b6044820152606401620005f7565b805b5f8381526005602052604090206001908101546200116f91906200431f565b81101562001219575f8381526005602052604090206001908101906200119790839062004405565b81548110620011aa57620011aa620043d3565b5f9182526020808320909101548583526005909152604090912060010180546001600160a01b039092169183908110620011e857620011e8620043d3565b5f91825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560010162001150565b505f8281526005602052604090206001018054806200123c576200123c62004559565b5f828152602080822083015f1990810180546001600160a01b03191690559092019092558382526005905260409020600101546200127a9062002e6b565b5f82815260056020526040812060020180549162001298836200456d565b90915550505f82815260056020526040902060010154620012b99062002e6b565b5f82815260056020526040902060019081015490036200079e575f82815260056020526040908190206003015490516370a0823160e01b81526001600160a01b03808616927f6e0d11c40e939975aea1b614617340d694125da9ebed64c96cab216ca971564e929116906370a08231906200133990309060040162003fae565b602060405180830381865afa15801562001355573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200137b919062004507565b60405190815260200160405180910390a25f82815260056020526040908190206003015490516370a0823160e01b81526200079e916001600160a01b031690859082906370a0823190620013d490309060040162003fae565b602060405180830381865afa158015620013f0573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001416919062004507565b62002e49565b5f6003545f036200142c57505f90565b5f60016003546200143e91906200431f565b5f908152600560205260409020546001600160a01b031692915050565b6040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a08231906200149390309060040162003fae565b602060405180830381865afa158015620014af573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620014d5919062004507565b6040518363ffffffff1660e01b8152600401620014f492919062004585565b6020604051808303815f875af115801562001511573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620015379190620043e7565b5050565b600281516200154b9190620045b2565b15620015895760405162461bcd60e51b815260206004820152600c60248201526b26bab9ba1031329032bb32b760a11b6044820152606401620005f7565b5f815111620015ce5760405162461bcd60e51b815260206004820152601060248201526f026bab9ba103430bb329039ba3ab333160851b6044820152606401620005f7565b80516200153790600a90602084019062003ebb565b335f908152600b60209081526040808320546001600160a01b03858116808652600d8552838620845160a081018652815484168152600180830154808616838a015262ffffff600160a01b82041683890152600160b81b9004600290810b606084015290920154841660808201528488526005909652938620600301549294939273fffd8963efd1fc6a506488495d951d5263988d26921611156200168d57505f90506401000276a45b60408051606081018252831515815260208082018a90526001600160a01b03808516838501525f8881526005909252929020600301548992620016d4911633308562002cd0565b5f8681526005602052604090206003015462001727906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000620017218c600162004405565b62002eb6565b5f806001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d1da87a088856200176742606462004405565b336040518563ffffffff1660e01b81526004016200178994939291906200445e565b60408051808303815f875af1158015620017a5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620017cb9190620044af565b915091505f620017db3362001004565b90506200181360405180604001604052806012815260200171141c9bdc195c9d1e481c1d5c98da185cd95960721b8152508262002f56565b5f8181526008602052604090819020805460ff19166001179055516370a0823160e01b815262001862908c9033906001600160a01b038316906370a0823190620013d490309060040162003fae565b50505050505050505092915050565b5f6003545f036200188157505f90565b5f60016003546200189391906200431f565b5f81815260056020526040908190206003015490516370a0823160e01b81529192506001600160a01b0316906370a0823190620018d590309060040162003fae565b602060405180830381865afa158015620018f1573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001917919062004507565b91505090565b5f6003545f036200192d57505f90565b5f60016003546200193f91906200431f565b5f9081526005602052604090206002015492915050565b620019648233308462002cd0565b600380545f90815260056020818152604080842060019081018054918201815585528285200180546001600160a01b031916339081179091559454948452600b825280842085905593835252908120600201805491620019c483620043b8565b9091555050600380545f908152600560205260409020810180546001600160a01b0319166001600160a01b0385161790555462001a019062002f9f565b6003545f90815260056020908152604091829020600601805483518184028101840190945280845262001a74939283018282801562001a6857602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831162001a49575b505050505083620032e7565b60038054905f62001a8583620043b8565b91905055505050565b5f805f600642443360405160200162001ac793929190928352602083019190915260601b6001600160601b031916604082015260540190565b604051602081830303815290604052805190602001205f1c62001aeb9190620045b2565b62001af890600162004405565b90505f60064244338560405160200162001b389493929190938452602084019290925260601b6001600160601b0319166040830152605482015260740190565b604051602081830303815290604052805190602001205f1c62001b5c9190620045b2565b62001b6990600162004405565b905062001b77818362004405565b60408051848152602081018490529194506001600160a01b038716917fb98bd781f8922be86259e959f348b54e83f0edfebaf396d6e64504cbd62c506c910160405180910390a280820362001bcb57600193505b5050915091565b6040516001600160a01b038216907f766bbc01371440eeeea4854ebd8f29d05a580289d44d819c7de25daa5b8f48d0905f90a2335f908152600e602090815260408083208390556001600160a01b03939093168252600f905220805460ff19166001179055565b5f6003545f0362001c4957505f90565b5f600160035462000f2091906200431f565b6001600160a01b0381165f908152600b60205260408120548162001c7f8462001004565b90505f5b5f8381526005602052604090206006015481101562001d53575f83815260056020526040812060060180548390811062001cc15762001cc1620043d3565b5f9182526020909120015460405163a61b8c0b60e01b8152600481018590526001600160a01b039091169150819063a61b8c0b90602401602060405180830381865afa15801562001d14573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001d3a9190620043e7565b1562001d495795945050505050565b5060010162001c83565b505f949350505050565b6003545f0362001d815760405162461bcd60e51b8152600401620005f790620045c8565b5f600160035462001d9391906200431f565b5f8181526005602090815260408083206001018054825181850281018501909352808352949550929390929183018282801562001df857602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831162001dd9575b505050505090505f5b815181101562001e885781818151811062001e205762001e20620043d3565b60200260200101516001600160a01b0316336001600160a01b03160362001e7f5760405162461bcd60e51b815260206004820152601260248201527143616e206e6f74206a6f696e20747769636560701b6044820152606401620005f7565b60010162001e01565b505f82815260056020818152604080842060018082018054918201815580875284872090910180546001600160a01b031916339081179091558652600b8452918520879055868552929091525460079091015462001ee79190620045f0565b5f8481526005602052604090206003015490915062001f12906001600160a01b031633308462002cd0565b5f838152600560205260408120600701805483929062001f3490849062004405565b90915550505f83815260056020526040812060020180549162001f5783620043b8565b9190505550505050565b6003545f0362001fb45760405162461bcd60e51b815260206004820152601f60248201527f412067616d6520686173206e6f74206265656e207365745570282920796574006044820152606401620005f7565b5f600160035462001fc691906200431f565b335f818152600660209081526040808320805460ff19166001179055848352600582529182902080546001600160a01b03191684179055600354915191825292935090917fea32a03505fd9f04d664676d72295a86c5fb0465e69654751907ca305bc1d1c7910160405180910390a25f818152600560209081526040808320600301546001600160a01b03168352600c909152812060020154908190036200207457506803cb71f51fc55800005b5f5b5f838152600560205260409020600101548110156200079e575f838152600560205260409020600381015460019091018054620020e6926001600160a01b0316919084908110620020cb57620020cb620043d3565b5f918252602090912001546001600160a01b03168462002e49565b60010162002076565b5f60035411620021135760405162461bcd60e51b8152600401620005f79062004335565b335f818152600b602090815260408083205480845260059092529091205490916001600160a01b03909116146200215e5760405162461bcd60e51b8152600401620005f7906200435e565b335f9081526006602052604090205460ff166200218f5760405162461bcd60e51b8152600401620005f7906200438e565b335f908152600660209081526040808320805460ff19169055600f90915290205460ff16156200224d57335f908152600e60205260408120805491620021d583620043b8565b91905055508180620021f65750335f908152600e6020526040902054600211155b1562002246576200222f6040518060400160405280601081526020016f155cd95c881b19585d995cc81a985a5b60821b81525062003329565b335f908152600f60205260409020805460ff191690555b5f92505f91505b8115620022ad57335f908152600660209081526040808320805460ff19166001179055600790915281208054916200228583620043b8565b9091555050335f9081526007602052604090205460031015620022ad57620022ad3362001bd2565b620022ba81338562002481565b6200079e8162002b76565b60606003545f03620023085760405162461bcd60e51b815260206004820152600b60248201526a139bc819d85b59481e595d60aa1b6044820152606401620005f7565b5f60016003546200231a91906200431f565b5f81815260056020908152604091829020600601805483518184028101840190945280845293945091929083018282801562000ea357602002820191905f5260205f209081546001600160a01b0316815260019091019060200180831162000e8457505050505091505090565b5f6003545f03620023ac5760405162461bcd60e51b8152600401620005f790620045c8565b5f6001600354620023be91906200431f565b5f81815260056020526040812060018101546007909101549293509091620023e79190620045f0565b9392505050565b6200153782826040516024016200240792919062004606565b60408051601f198184030181529190526020810180516001600160e01b0316636d786a5560e11b1790526200336b565b604051602481018390528115156044820152620015379060640160408051601f198184030181529190526020810180516001600160e01b0316631c9d7eb360e01b1790526200336b565b805f036200248e57505050565b5f8381526005602090815260408083206001600160a01b038616845260040190915281208054839290620024c490849062004405565b90915550505f8381526005602090815260408083206001600160a01b038616845260040190915290205460141162002595576040516001600160a01b038316907fa7c84f16d16ce89539ef3107dbb975722be90452c5a84a093ec18dc1023ff716905f90a25f8381526005602052604090206003015462002558906001600160a01b031683678ac7230489e8000062002e49565b5f8381526005602090815260408083206001600160a01b038616845260040190915281208054601492906200258f9084906200431f565b90915550505b5f8381526005602081815260408084206001600160a01b03871685526004019091529091205490819003620025fd576040516001600160a01b038416907fb87793a47333190de0d9c030730dd872177ef7c1f61e8a512cbd5fa600480c23905f90a250505050565b80600a0362002690576001600160a01b0383167f0c44e43c5373f34572493cdf86523be122e7cd9c22f1ae3c128837df3f780b52620026458467016345785d8a000062004620565b60405190815260200160405180910390a25f848152600560205260409020600301546200268a906001600160a01b031684620014168567016345785d8a000062004620565b50505050565b80600f03620026a4576200268a8362001bd2565b805f03620026b25750505050565b6040805180820182526002815261524560f01b6020808301919091525f84815260089091529190912054620026ec919060ff168362003376565b5f8181526008602052604090205460ff16156200268a575f6200270f82620007a3565b604051637533f73760e01b8152600481018490529091505f906001600160a01b03831690637533f73790602401602060405180830381865afa15801562002758573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200277e919062004507565b6200279190662386f26fc1000062004620565b5f87815260056020908152604080832060010180548251818502810185019093528083529495509293909291830182828015620027f657602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311620027d7575b505050505090505f5b815181101562002b6c575f846001600160a01b03166370a082318484815181106200282e576200282e620043d3565b60200260200101516040518263ffffffff1660e01b815260040162002854919062003fae565b602060405180830381865afa15801562002870573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062002896919062004507565b111562002b63575f846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620028db573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062002901919062004507565b856001600160a01b03166370a08231858581518110620029255762002925620043d3565b60200260200101516040518263ffffffff1660e01b81526004016200294b919062003fae565b602060405180830381865afa15801562002967573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200298d919062004507565b62002999908662004620565b620029a59190620045f0565b5f8a815260056020526040908190206003015490516370a0823160e01b815291925082916001600160a01b03909116906370a0823190620029eb908c9060040162003fae565b602060405180830381865afa15801562002a07573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062002a2d919062004507565b101562002a7d576040516001600160a01b038916907f99292dd3d22524358aa0d8397df9aaf9c130205fa85bf3f48d44ba6becbb4249905f90a262002a728862001057565b505050505050505050565b5f8981526005602052604090206003015462002aa5906001600160a01b031689308462002cd0565b5f89815260056020526040902060030154835162002aeb916001600160a01b03169085908590811062002adc5762002adc620043d3565b60200260200101518362002e49565b876001600160a01b03167f03b5033869479e8a98af42b272f05933f60489fe9fb43d63e11a6c31f3fa74748260405162002b2791815260200190565b60405180910390a262002b616040518060400160405280600e81526020016d5472616e736665722066756e647360901b8152508262002f56565b505b600101620027ff565b5050505050505050565b5f62002b8282620033c1565b905062002bba604051806040016040528060128152602001714368616e67696e6720706c6179657220746f60701b81525082620034ba565b5f828152600560209081526040918290205482518084019093526006835265383630bcb2b960d11b918301919091526001600160a01b03169062002c0090828462003503565b6001600160a01b0381165f9081526006602052604090205460ff161562002c7d5760405162461bcd60e51b815260206004820152602a60248201527f63616e206e6f74206368616e6765207768696c65206120757365722063616e206044820152691cdd1a5b1b081c9bdb1b60b21b6064820152608401620005f7565b6001600160a01b039081165f9081526007602090815260408083208390559482526005815284822080546001600160a01b031916949093169384179092559182526006905220805460ff19166001179055565b6040516001600160a01b03808516602483015283166044820152606481018290526200268a9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526200354e565b80158062002dba5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9062002d76903090869060040162004606565b602060405180830381865afa15801562002d92573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062002db8919062004507565b155b62002e275760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401620005f7565b6200079e8363095ea7b360e01b848460405160240162002d0592919062004585565b6200079e8363a9059cbb60e01b848460405160240162002d0592919062004585565b62002eb38160405160240162002e8391815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b1790526200336b565b50565b5f63095ea7b360e01b838360405160240162002ed492919062004585565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905062002f14848262003628565b6200268a576040516001600160a01b03841660248201525f604482015262002f4a90859063095ea7b360e01b9060640162002d05565b6200268a84826200354e565b62001537828260405160240162002f6f9291906200463a565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b1790526200336b565b604080516080810182526001815260066020820152600b918101919091526010606082015262002fce62003f16565b62002fd862003f16565b62002fe262003f16565b600380545f908152600560209081526040808320909301546001600160a01b03168252600c9052818120825160e081019384905291928290606082019083906004908288855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116200302857505050928452505060408051608081019182905260209093019291506001840190600490825f855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116200307d5790505050505050815260200160028201548152505090505f81604001511115620030e0578051602082015190945092506200314e565b6040805160808082018352603c8252607860208084019190915260a08385015260fa60608085019190915284518084018652600a808252601e828501526032828801819052604683850152875195860188526005865293850152601495840195909552820152909550935091505b5f5b600a54811015620032de575f600a8281548110620031725762003172620043d3565b905f5260205f2001600a8360016200318b919062004405565b815481106200319e576200319e620043d3565b905f5260205f2001600489600286620031b89190620045f0565b60048110620031cb57620031cb620043d3565b602002015189620031de600288620045f0565b60048110620031f157620031f1620043d3565b60200201518862003204600289620045f0565b60048110620032175762003217620043d3565b60200201518a6200322a60028a620045f0565b600481106200323d576200323d620043d3565b6020020151604051620032509062003f34565b620032629796959493929190620046de565b604051809103905ff0801580156200327c573d5f803e3d5ffd5b505f8981526005602090815260408220600601805460018101825590835291200180546001600160a01b0319166001600160a01b038316179055905081620032c481620043b8565b925050508080620032d590620043b8565b91505062003150565b50505050505050565b5f5b82518110156200079e575f838281518110620033095762003309620043d3565b602002602001015190506200331f8184620036cf565b50600101620032e9565b62002eb38160405160240162003340919062004739565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790525b62002eb381620039c2565b6200079e83838360405160240162003391939291906200474d565b60408051601f198184030181529190526020810180516001600160e01b03166364acac6b60e11b1790526200336b565b5f818152600560205260408120546001600160a01b0316815b5f8481526005602052604090206001015481101562003447575f84815260056020526040902060010180546001600160a01b038416919083908110620034245762003424620043d3565b5f918252602090912001546001600160a01b0316146200344757600101620033da565b5f848152600560205260408120600190810154906200346890849062004405565b620034749190620045b2565b5f868152600560205260409020600101805491925090829081106200349d576200349d620043d3565b5f918252602090912001546001600160a01b031695945050505050565b620015378282604051602401620034d392919062004773565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526200336b565b6200079e8383836040516024016200351e939291906200479e565b60408051601f198184030181529190526020810180516001600160e01b03166307e763af60e51b1790526200336b565b5f620035a4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620039e19092919063ffffffff16565b905080515f1480620035c7575080806020019051810190620035c79190620043e7565b6200079e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620005f7565b5f805f846001600160a01b031684604051620036459190620047d2565b5f604051808303815f865af19150503d805f811462003680576040519150601f19603f3d011682016040523d82523d5f602084013e62003685565b606091505b5091509150818015620036b3575080511580620036b3575080806020019051810190620036b39190620043e7565b8015620036c65750620036c685620039f9565b95945050505050565b81816001600160a01b038083169082161015620036e857905b6040805160a0810182526001600160a01b03848116825283811660208084019182525f848601818152603c606087018181527f000000000000000000000000000000000000000000000000000000000000000080881660808a019081528e89168652600d909652988420885181546001600160a01b0319908116918a16919091178255965160018201805495519351918a166001600160b81b031990961695909517600160a01b62ffffff948516021762ffffff60b81b1916600160b81b93909116929092029190911790925592516002909101805490941694169390931790915585938593819084620037dc8162003a08565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c9b5016a83836200381c42600a62004405565b6040518463ffffffff1660e01b81526004016200383c93929190620047ef565b6020604051808303815f875af115801562003859573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200387f91906200483b565b508b6001600160a01b031663a6cb55bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620038bd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620038e3919062004507565b620038f090600662004620565b8c6001600160a01b03166357fbb5de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200392d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062003953919062004507565b6200395f919062004405565b50620039b48c7f00000000000000000000000000000000000000000000000000000000000000008e6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401620013d4919062003fae565b505050505050505050505050565b5f6a636f6e736f6c652e6c6f6790505f80835160208501845afa505050565b6060620039f184845f8562003d36565b949350505050565b6001600160a01b03163b151590565b5f805f8360020b1262003a1f578260020b62003a26565b8260020b5f035b9050620d89e881111562003a4d576040516333a3bdff60e21b815260040160405180910390fd5b5f816001165f0362003a6457600160801b62003a76565b6ffffcb933bd6fad37aa2d162d1a5940015b6001600160881b03169050600282161562003aa1576ffff97272373d413259a46990580e213a0260801c5b600482161562003ac1576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161562003ae1576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161562003b01576fffcb9843d60f6159c9db58835c9266440260801c5b602082161562003b21576fff973b41fa98c081472e6896dfb254c00260801c5b604082161562003b41576fff2ea16466c96a3843ec78b326b528610260801c5b608082161562003b61576ffe5dee046a99a2a811c461f1969c30530260801c5b61010082161562003b82576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b61020082161562003ba3576ff987a7253ac413176f2b074cf7815e540260801c5b61040082161562003bc4576ff3392b0822b70005940c7a398e4b70f30260801c5b61080082161562003be5576fe7159475a2c29b7443b29c7fa6e889d90260801c5b61100082161562003c06576fd097f3bdfd2022b8845ad8f792aa58250260801c5b61200082161562003c27576fa9f746462d870fdf8a65dc1f90e061e50260801c5b61400082161562003c48576f70d869a156d2a1b890bb3df62baf32f70260801c5b61800082161562003c69576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161562003c8b576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161562003cac576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161562003ccc576d2216e584f5fa1ea926041bedfe980260801c5b6208000082161562003cea576b048a170391f7dc42444e8fa20260801c5b5f8460020b131562003d0d57805f198162003d095762003d096200459e565b0490505b600160201b81061562003d2257600162003d24565b5f5b60ff16602082901c0192505050919050565b60608247101562003d995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620005f7565b5f80866001600160a01b0316858760405162003db69190620047d2565b5f6040518083038185875af1925050503d805f811462003df2576040519150601f19603f3d011682016040523d82523d5f602084013e62003df7565b606091505b509150915062003e0a8783838762003e15565b979650505050505050565b6060831562003e885782515f0362003e805762003e3285620039f9565b62003e805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620005f7565b5081620039f1565b620039f1838381511562003e9f5781518083602001fd5b8060405162461bcd60e51b8152600401620005f7919062004739565b828054828255905f5260205f2090810192821562003f04579160200282015b8281111562003f04578251829062003ef39082620048ac565b509160200191906001019062003eda565b5062003f1292915062003f42565b5090565b60405180608001604052806004906020820280368337509192915050565b610f2c806200497983390190565b8082111562003f12575f62003f58828262003f62565b5060010162003f42565b50805462003f70906200451f565b5f825580601f1062003f80575050565b601f0160209004905f5260205f209081019062002eb391905b8082111562003f12575f815560010162003f99565b6001600160a01b0391909116815260200190565b6001600160a01b038116811462002eb3575f80fd5b5f6020828403121562003fe8575f80fd5b8135620023e78162003fc2565b5f6020828403121562004006575f80fd5b5035919050565b5f80604083850312156200401f575f80fd5b823591506020830135620040338162003fc2565b809150509250929050565b602080825282518282018190525f9190848201906040850190845b81811015620040805783516001600160a01b03168352928401929184019160010162004059565b50909695505050505050565b5f5b83811015620040a85781810151838201526020016200408e565b50505f910152565b5f8151808452620040c98160208601602086016200408c565b601f01601f19169290920160200192915050565b5f60208083016020845280855180835260408601915060408160051b8701019250602087015f5b828110156200413657603f1988860301845262004123858351620040b0565b9450928501929085019060010162004104565b5092979650505050505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b038111828210171562004182576200418262004143565b604052919050565b5f60208083850312156200419c575f80fd5b82356001600160401b0380821115620041b3575f80fd5b8185019150601f86601f840112620041c9575f80fd5b823582811115620041de57620041de62004143565b8060051b620041ef86820162004157565b918252848101860191868101908a84111562004209575f80fd5b87870192505b838310156200429c5782358681111562004227575f80fd5b8701603f81018c1362004238575f80fd5b8881013560408882111562004251576200425162004143565b62004264828901601f19168c0162004157565b8281528e8284860101111562004278575f80fd5b828285018d8301375f9281018c01929092525083525091870191908701906200420f565b9a9950505050505050505050565b5f8060408385031215620042bc575f80fd5b8235620042c98162003fc2565b946020939093013593505050565b801515811462002eb3575f80fd5b5f8060408385031215620042f7575f80fd5b8235915060208301356200403381620042d7565b634e487b7160e01b5f52601160045260245ffd5b8181038181111562000f205762000f206200430b565b6020808252600f908201526e139bc811d85b594810dc99585d1959608a1b604082015260600190565b60208082526016908201527526bab9ba1031329031bab93932b73a10283630bcb2b960511b604082015260600190565b60208082526010908201526f155cd95c8818d85b9b9bdd081c9bdb1b60821b604082015260600190565b5f60018201620043cc57620043cc6200430b565b5060010190565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215620043f8575f80fd5b8151620023e781620042d7565b8082018082111562000f205762000f206200430b565b80516001600160a01b03908116835260208083015182169084015260408083015162ffffff169084015260608083015160020b9084015260809182015116910152565b61014081016200446f82876200441b565b8451151560a0830152602085015160c08301526040909401516001600160a01b0390811660e0830152610100820193909352911661012090910152919050565b5f8060408385031215620044c1575f80fd5b505080516020909101519092909150565b8082025f8212600160ff1b84141615620044f057620044f06200430b565b818105831482151762000f205762000f206200430b565b5f6020828403121562004518575f80fd5b5051919050565b600181811c908216806200453457607f821691505b6020821081036200455357634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603160045260245ffd5b5f816200457e576200457e6200430b565b505f190190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b5f52601260045260245ffd5b5f82620045c357620045c36200459e565b500690565b6020808252600e908201526d139bc819d85b595cc8195e1a5cdd60921b604082015260600190565b5f826200460157620046016200459e565b500490565b6001600160a01b0392831681529116602082015260400190565b808202811582820484141762000f205762000f206200430b565b604081525f6200464e6040830185620040b0565b90508260208301529392505050565b5f81546200466b816200451f565b8085526020600183811680156200468b5760018114620046a657620046d3565b60ff1985168884015283151560051b880183019550620046d3565b865f52825f205f5b85811015620046cb5781548a8201860152908301908401620046ae565b890184019650505b505050505092915050565b60e081525f620046f260e083018a6200465d565b828103602084015262004706818a6200465d565b6040840198909852505060ff9485166060820152928416608084015290831660a083015290911660c09091015292915050565b602081525f620023e76020830184620040b0565b606081525f620047616060830186620040b0565b93151560208301525060400152919050565b604081525f620047876040830185620040b0565b905060018060a01b03831660208301529392505050565b606081525f620047b26060830186620040b0565b6001600160a01b0394851660208401529290931660409091015292915050565b5f8251620047e58184602087016200408c565b9190910192915050565b5f610100620047ff83876200441b565b6001600160a01b039490941660a08301525060c0810183905260029281019290925261060f60f31b61012083015260e082015261014001919050565b5f602082840312156200484c575f80fd5b81518060020b8114620023e7575f80fd5b601f8211156200079e57805f5260205f20601f840160051c81016020851015620048845750805b601f840160051c820191505b81811015620048a5575f815560010162004890565b5050505050565b81516001600160401b03811115620048c857620048c862004143565b620048e081620048d984546200451f565b846200485d565b602080601f83116001811462004916575f8415620048fe5750858301515b5f19600386901b1c1916600185901b17855562004970565b5f85815260208120601f198616915b82811015620049465788860151825594840194600190910190840162004925565b50858210156200496457878501515f19600388901b60f8161c191681555b505060018460011b0185555b50505050505056fe60a06040525f6007555f6008555f6009556004600a5534801562000021575f80fd5b5060405162000f2c38038062000f2c833981016040819052620000449162000231565b868660036200005483826200034c565b5060046200006382826200034c565b505050620000873386670de0b6b3a76400006200008191906200042c565b620000a7565b336080526006939093556007919091556008556009555062000462915050565b6001600160a01b038216620001025760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060025f8282546200011591906200044c565b90915550506001600160a01b0382165f81815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f83011262000194575f80fd5b81516001600160401b0380821115620001b157620001b162000170565b604051601f8301601f19908116603f01168101908282118183101715620001dc57620001dc62000170565b8160405283815260209250866020858801011115620001f9575f80fd5b5f91505b838210156200021c5785820183015181830184015290820190620001fd565b5f602085830101528094505050505092915050565b5f805f805f805f60e0888a03121562000248575f80fd5b87516001600160401b03808211156200025f575f80fd5b6200026d8b838c0162000184565b985060208a015191508082111562000283575f80fd5b50620002928a828b0162000184565b60408a015160608b015160808c015160a08d015160c0909d01519b9e939d50919b909a919950975095509350505050565b600181811c90821680620002d857607f821691505b602082108103620002f757634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200016b57805f5260205f20601f840160051c81016020851015620003245750805b601f840160051c820191505b8181101562000345575f815560010162000330565b5050505050565b81516001600160401b0381111562000368576200036862000170565b6200038081620003798454620002c3565b84620002fd565b602080601f831160018114620003b6575f84156200039e5750858301515b5f19600386901b1c1916600185901b17855562000410565b5f85815260208120601f198616915b82811015620003e657888601518255948401946001909101908401620003c5565b50858210156200040457878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141762000446576200044662000418565b92915050565b8082018082111562000446576200044662000418565b608051610ab16200047b5f395f6103240152610ab15ff3fe608060405234801561000f575f80fd5b50600436106100d9575f3560e01c806306fdde03146100dd578063095ea7b3146100fb57806318160ddd1461011e57806323b872dd14610130578063313ce56714610143578063395093511461015257806357fbb5de146101655780636534ccd21461016d57806370a08231146101825780637533f737146101aa57806395d89b41146101bd578063a457c2d7146101c5578063a61b8c0b146101d8578063a6cb55bd146101eb578063a9059cbb146101f3578063dd62ed3e14610206578063e757223014610219575b5f80fd5b6100e561022c565b6040516100f291906108b0565b60405180910390f35b61010e610109366004610917565b6102bc565b60405190151581526020016100f2565b6002545b6040519081526020016100f2565b61010e61013e36600461093f565b6102d5565b604051601281526020016100f2565b61010e610160366004610917565b6102f8565b600754610122565b61018061017b366004610978565b610319565b005b610122610190366004610978565b6001600160a01b03165f9081526020819052604090205490565b6101226101b8366004610998565b610378565b6100e56103bc565b61010e6101d3366004610917565b6103cb565b61010e6101e6366004610998565b61044a565b600954610122565b61010e610201366004610917565b610480565b6101226102143660046109af565b61048d565b610122610227366004610998565b6104b7565b60606003805461023b906109e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610267906109e0565b80156102b25780601f10610289576101008083540402835291602001916102b2565b820191905f5260205f20905b81548152906001019060200180831161029557829003601f168201915b5050505050905090565b5f336102c98185856104f5565b60019150505b92915050565b5f336102e2858285610618565b6102ed858585610690565b506001949350505050565b5f336102c981858561030a838361048d565b6103149190610a26565b6104f5565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461034d575f80fd5b6001600160a01b0381165f90815260056020526040812080549161037083610a39565b919050555050565b5f80600654836103889190610a51565b9050806009546103989190610a64565b6008546103a59190610a26565b91506103b660085460095483610832565b50919050565b60606004805461023b906109e0565b5f33816103d8828661048d565b90508381101561043d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102ed82868684036104f5565b5f816006541115801561046c5750600a546006546104689190610a26565b8211155b1561047957506001919050565b505f919050565b5f336102c9818585610690565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b5f80600654836104c79190610a51565b9050806009546104d79190610a64565b6007546104e49190610a26565b91506103b660075460095483610832565b6001600160a01b0383166105575760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610434565b6001600160a01b0382166105b85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610434565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b5f610623848461048d565b90505f19811461068a578181101561067d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610434565b61068a84848484036104f5565b50505050565b6001600160a01b0383166106f45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610434565b6001600160a01b0382166107565760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610434565b6001600160a01b0383165f90815260208190526040902054818110156107cd5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610434565b6001600160a01b038481165f81815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361068a565b6040516024810184905260448101839052606481018290526108809060840160408051601f198184030181529190526020810180516001600160e01b031663347b5e8f60e21b179052610885565b505050565b61088e81610891565b50565b5f6a636f6e736f6c652e6c6f6790505f80835160208501845afa505050565b5f602080835283518060208501525f5b818110156108dc578581018301518582016040015282016108c0565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610912575f80fd5b919050565b5f8060408385031215610928575f80fd5b610931836108fc565b946020939093013593505050565b5f805f60608486031215610951575f80fd5b61095a846108fc565b9250610968602085016108fc565b9150604084013590509250925092565b5f60208284031215610988575f80fd5b610991826108fc565b9392505050565b5f602082840312156109a8575f80fd5b5035919050565b5f80604083850312156109c0575f80fd5b6109c9836108fc565b91506109d7602084016108fc565b90509250929050565b600181811c908216806109f457607f821691505b6020821081036103b657634e487b7160e01b5f52602260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b808201808211156102cf576102cf610a12565b5f60018201610a4a57610a4a610a12565b5060010190565b818103818111156102cf576102cf610a12565b80820281158282048414176102cf576102cf610a1256fea26469706673582212206313d616a51b582b76e87bb991f66149da1cf5c3614ade103a1bb75754a9087564736f6c63430008180033a2646970667358221220052e9cb95de8a09cf06be9785cefc909ac8e75a911771be4ec4f86561c5efbaa64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidTick()": [
        {
          "notice": "Thrown when the tick passed to #getSqrtRatioAtTick is not between MIN_TICK and MAX_TICK"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3251,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "keyHash",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 3253,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "fee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3255,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "randomResult",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3262,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "gameID",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3266,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "playerToGame",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3271,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "idToGameState",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(GameState)5952_storage)"
      },
      {
        "astId": 3275,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "userRoll",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3279,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "userRollsRow",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3283,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "rentExists",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3288,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "usersThatOwn",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3291,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "usualNamesAndSymbols",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3298,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "addressToGame",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3303,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "getCurrencyInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(TokenInfo)3314_storage)"
      },
      {
        "astId": 3319,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "addressToKey",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(PoolKey)15649_storage)"
      },
      {
        "astId": 5417,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "daysInJail",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5421,
        "contract": "contracts/TokenTown/Game.sol:Game",
        "label": "userInJail",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(Property)6160)dyn_storage": {
        "base": "t_contract(Property)6160",
        "encoding": "dynamic_array",
        "label": "contract Property[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)4_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[4]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IHooks)9429": {
        "encoding": "inplace",
        "label": "contract IHooks",
        "numberOfBytes": "20"
      },
      "t_contract(Property)6160": {
        "encoding": "inplace",
        "label": "contract Property",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(PoolKey)15649_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PoolKey)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolKey)15649_storage"
      },
      "t_mapping(t_address,t_struct(TokenInfo)3314_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Game.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)3314_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(GameState)5952_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IGame.GameState)",
        "numberOfBytes": "32",
        "value": "t_struct(GameState)5952_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GameState)5952_storage": {
        "encoding": "inplace",
        "label": "struct IGame.GameState",
        "members": [
          {
            "astId": 5930,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "currentPlayer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5933,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "players",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5935,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "numberOfPlayers",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5937,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "chosenCurrency",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5941,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "playerPosition",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5945,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "playerOwnedProperty",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 5949,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "propertyList",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_contract(Property)6160)dyn_storage"
          },
          {
            "astId": 5951,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "buyIn",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(PoolKey)15649_storage": {
        "encoding": "inplace",
        "label": "struct PoolKey",
        "members": [
          {
            "astId": 15634,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "currency0",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(Currency)15324"
          },
          {
            "astId": 15638,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "currency1",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(Currency)15324"
          },
          {
            "astId": 15641,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "fee",
            "offset": 20,
            "slot": "1",
            "type": "t_uint24"
          },
          {
            "astId": 15644,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "tickSpacing",
            "offset": 23,
            "slot": "1",
            "type": "t_int24"
          },
          {
            "astId": 15648,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "hooks",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IHooks)9429"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TokenInfo)3314_storage": {
        "encoding": "inplace",
        "label": "struct Game.TokenInfo",
        "members": [
          {
            "astId": 3307,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "priceStarts",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)4_storage"
          },
          {
            "astId": 3311,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "priceChanges",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint8)4_storage"
          },
          {
            "astId": 3313,
            "contract": "contracts/TokenTown/Game.sol:Game",
            "label": "userStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(Currency)15324": {
        "encoding": "inplace",
        "label": "Currency",
        "numberOfBytes": "20"
      }
    }
  }
}